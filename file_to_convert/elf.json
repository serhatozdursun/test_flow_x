{
	"info": {
		"_postman_id": "b6bc19fc-f206-4c57-9940-6d6658449a3a",
		"name": "e.l.f. Cosmetics - Automated End To End Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29268403",
		"_collection_link": "https://poq-4770.postman.co/workspace/Elf~cba25ad7-2435-4369-be6e-f6df5360a74c/collection/23546774-b6bc19fc-f206-4c57-9940-6d6658449a3a?action=share&source=collection_link&creator=29268403"
	},
	"item": [
		{
			"name": "iOS",
			"item": [
				{
					"name": "Guest User Joureny",
					"item": [
						{
							"name": "Settings & Launch",
							"item": [
								{
									"name": "[iOS] - Splash request - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Localization array is not empty\", function () {",
													"    pm.expect(jsonData.localization.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Theme array is not empty\", function () {",
													"    pm.expect(jsonData.theme.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Config array is not empty\", function () {",
													"    pm.expect(jsonData.config.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.ios.versionCode\")}`, function () {",
													"    var forceUpdateConfigValue = jsonData.config.find(config => config.key === \"forceUpdate\").value;",
													"    pm.expect(forceUpdateConfigValue).to.eql('false');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random poq-user-id on the first running request",
													"",
													"var uuid = require('uuid');",
													"var poqUserId = uuid.v4();",
													"pm.environment.set(\"tests.ios.poq-user-id\", poqUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/splash/ios/{{poq-app-id}}/3?poqUserId={{tests.ios.poq-user-id}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"splash",
												"ios",
												"{{poq-app-id}}",
												"3"
											],
											"query": [
												{
													"key": "poqUserId",
													"value": "{{tests.ios.poq-user-id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Launch - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Force update is not applied on current app version\", function () {",
													"    pm.expect(jsonData.forceUpdate).to.be.null;",
													"});",
													"",
													"pm.test(\"Validate the onboarding object\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the onboarding ID is a non-empty string\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.all.keys('forceUpdate', 'maintenance', 'onboarding', 'customData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/launch?appVersion={{tests.ios.appVersion}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"launch"
											],
											"query": [
												{
													"key": "appVersion",
													"value": "{{tests.ios.appVersion}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Dynamic Yield",
							"item": [
								{
									"name": "[iOS] - Dynamic yield identifier - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Store userId and sessionId in environment variables",
													"const jsonData = pm.response.json();",
													"var userId = jsonData.userId;",
													"var sessionId = jsonData.sessionId;",
													"",
													"pm.environment.set(\"tests.var.dyUserId\", userId);",
													"pm.environment.set(\"tests.var.dySessionId\", sessionId);",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"userId is a non-empty string\", function () {",
													"    pm.expect(userId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"pm.test(\"sessionId is a non-empty string\", function () {",
													"    pm.expect(sessionId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"sessionId should not be empty\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/dynamicyield/identifiers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"dynamicyield",
												"identifiers"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Dynamic Yield Recommendation",
							"item": [
								{
									"name": "[iOS] - Home DY recommendation - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const  jsonData = pm.response.json();",
													"",
													"pm.test(\"numberOfItems is not 0 or null\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.not.equal(0).and.to.not.be.null;",
													"});",
													"",
													"pm.test(\"Analytics ID is present for each product recommended\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        pm.expect(product.analyticsId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Analytics ID should not be empty\");",
													"    })",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/dynamicyield/recommendations?selector=poq-homescreen-recommendations&slot-content-id=home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"dynamicyield",
												"recommendations"
											],
											"query": [
												{
													"key": "selector",
													"value": "poq-homescreen-recommendations"
												},
												{
													"key": "slot-content-id",
													"value": "home"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Cart DY recommendation - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const  jsonData = pm.response.json();",
													"",
													"pm.test(\"numberOfItems is not 0 or null\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.not.equal(0).and.to.not.be.null;",
													"});",
													"",
													"pm.test(\"Analytics ID is present for each product recommended\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        pm.expect(product.analyticsId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Analytics ID should not be empty\");",
													"    })",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/dynamicyield/recommendations?slot-content-id=cart&selector=poq-homescreen-recommendations",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"dynamicyield",
												"recommendations"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "cart"
												},
												{
													"key": "selector",
													"value": "poq-homescreen-recommendations"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PDP DY recommendation - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const  jsonData = pm.response.json();",
													"",
													"pm.test(\"numberOfItems is not 0 or null\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.not.equal(0).and.to.not.be.null;",
													"});",
													"",
													"pm.test(\"Analytics ID is present for each product recommended\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        pm.expect(product.analyticsId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Analytics ID should not be empty\");",
													"    })",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/dynamicyield/recommendations?slot-content-id=pdp&selector=poq-homescreen-recommendations",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"dynamicyield",
												"recommendations"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "pdp"
												},
												{
													"key": "selector",
													"value": "poq-homescreen-recommendations"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"pm.request.headers.add({",
											"  key: 'dy-session-id',",
											"  value: '{{tests.var.dySessionId}}'",
											"});",
											"",
											"pm.request.headers.add({",
											"  key: 'dy-user-id',",
											"  value: '{{tests.var.dyUserId}}'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Banners",
							"item": [
								{
									"name": "[iOS] - Banners - No labels - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Online - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=online",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "online"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Cosmetics - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=cosmetics",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "cosmetics"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Skin - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=skin",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "skin"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "App Stories",
							"item": [
								{
									"name": "[iOS] - App Stories - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Stories array is not empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.stories.length).to.not.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/appstories/apps/{{poq-app-id}}/home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"appstories",
												"apps",
												"{{poq-app-id}}",
												"home"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Catalogue",
							"item": [
								{
									"name": "Search by Keyword Sort and Filters",
									"item": [
										{
											"name": "[iOS] - Predictive Search - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check categories is not empty\", function () {",
															"    pm.expect(jsonData.categories.length).to.be.above(0);",
															"});",
															"",
															"pm.test(\"Check category title property exists\", function () {",
															"   pm.expect(jsonData.categories[0]).to.have.property('title');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate predictive results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.predictiveSearchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.predictiveSearchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search/predictive?keyword={{tests.var.predictiveSearchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search",
														"predictive"
													],
													"query": [
														{
															"key": "keyword",
															"value": "{{tests.var.predictiveSearchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search by keyword - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"//Extracting Sorting IDs",
															"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}",
															"",
															"// Store product ID which are stock available to true",
															"var productIds = [];",
															"var listingIds = [];",
															"var productNames = [];",
															"var variationIds = [];",
															"",
															"var productList = jsonData.listings;",
															"",
															"if (productList.length === 0) {",
															"    postman.setNextRequest(\"[iOS] - Search by keyword - Guest\");",
															"}",
															"",
															"for (var i=0; i < productList.length; i++)",
															"{",
															"    var variantGroups = productList[i].variantGroups;",
															"    for (var j=0; j < variantGroups.length; j++)",
															"    {",
															"        if ((variantGroups[j].stock && variantGroups[j].stock.available === true)) {",
															"            productIds.push(productList[i].productId)",
															"            listingIds.push(productList[i].id)",
															"            if (productList[i].variantGroups[j].formVariationIds) {",
															"                variationIds.push(productList[i].variantGroups[j].formVariationIds[0])",
															"            } else {",
															"                var listingId = productList[i].id.split(\"-poqListingId-\");",
															"                variationIds.push(listingId[1]);",
															"            }",
															"            productNames.push(productList[i].name)",
															"        }",
															"    }",
															"}",
															"",
															"",
															"// Pick a random number within productIds array length to extact a random product at run time ",
															"var randomNumber = Math.floor(Math.random() * (productIds.length));",
															"",
															"pm.environment.set(\"tests.var.productId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.listingId\", listingIds[randomNumber]);",
															"pm.environment.set(\"tests.var.productName\", productNames[randomNumber]);",
															"pm.environment.set(\"tests.var.variantId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.variantGroupId\", variationIds[randomNumber]);",
															"",
															"// Fill a list of ids to be used to simulate \"Recently View\" carrousel",
															"pm.environment.set(\"tests.var.recentyViewIds\", Object.values(productIds));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate PLP results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.searchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.searchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search PLP - Dynamically sorted - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
															"",
															"var sortingOptionId = sortingOptionsIds.shift();",
															"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&sort={{tests.var.sortOptionId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "sort",
															"value": "{{tests.var.sortOptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search PLP filter by maximum and minimum price - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Listings is not empty\", function () {",
															"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Filters are not empty\", function () {",
															"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&maxPrice=100&minPrice=1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "maxPrice",
															"value": "100"
														},
														{
															"key": "minPrice",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[iOS] - Shop - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"const allCategories = [];",
													"",
													"pm.test(\"Verify that the 'categories' array is present and not empty\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData.categories).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Catgories array should not be empty\");",
													"});",
													"",
													"const getAllCategoriesObjects = array => array.flatMap(category => {",
													"    if (Array.isArray(category.categories) && category.categories.length > 0) {",
													"       return getAllCategoriesObjects(category.categories)",
													"    } else {",
													"       allCategories.push(category);",
													"   }",
													"})",
													"",
													"pm.test(\"Verify that the 'categories' have all properties correctly evaluated\", function () {",
													"    getAllCategoriesObjects(jsonData.categories);",
													"    allCategories.forEach(category => {",
													"        pm.expect(category).to.exist.and.to.be.an('object')",
													"        pm.expect(category.id).to.not.eql(null);",
													"        pm.expect(category.id).to.have.lengthOf.at.least(1, \"'id' should not be empty\");",
													"        pm.expect(category.name).to.not.eql(null);",
													"        pm.expect(category.name).to.have.lengthOf.at.least(1, \"'name' should not be empty\");",
													"    })",
													"});",
													"",
													"// Get all sub categories and randomised",
													"const getIds = arr => (",
													"    arr.flatMap(                // iterate using \".flatMap()\" to avoid nesting",
													"        ({ id, categories }) => {   // de-structure to directly access \"id\" & \"categories\"",
													"            if (                    // if \"categories\" is not empty, recurse to next level",
													"                Array.isArray(categories) &&",
													"                categories.length > 0",
													"            ) {",
													"                return getIds(categories);",
													"            } else {                // if it is empty, return the id",
													"                return id;",
													"            }",
													"        }",
													"    )",
													");",
													"",
													"var subCategories = getIds(jsonData.categories);",
													"const random = Math.floor(Math.random() * subCategories.length);",
													"",
													"pm.environment.set(\"tests.var.subCategoryId\", subCategories[random]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/shop?slot-content-id=shop",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"shop"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "shop"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PLP - Products - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var listingSize = jsonData.listings.length;",
													"",
													"// Check if PLP has item greater then 3 and retry for maximum 10 times ",
													"// If it doesn't then it executes '[iOS] - Shop' request which in turn is the one selecting a random category",
													"",
													"const maxNumberOfTries = 10;",
													"if (!pm.environment.get(\"tests.var.tries\")) {  ",
													"    pm.environment.set(\"tests.var.tries\", 1);",
													"}",
													"    ",
													"if ((jsonData.pagination.numberOfItems < 3) && (pm.environment.get(\"tests.var.tries\") < maxNumberOfTries)) {",
													"        const tries = parseInt(pm.environment.get(\"tests.var.tries\"), 10);",
													"        pm.environment.set(\"tests.var.tries\", tries + 1);",
													"        postman.setNextRequest(\"[iOS] - Shop - Guest\");",
													"    } else {",
													"        pm.environment.unset(\"tests.var.tries\");",
													"",
													"        pm.test(\"Assert listings is not empty\", function () {",
													"            pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"        });",
													"",
													"        pm.test(\"Assert filters is not empty\", function () {",
													"            pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"        });",
													"",
													"        var numberOfItems = jsonData.pagination.numberOfItems;",
													"",
													"        pm.test(\"Check PLP is not empty\", function () {",
													"            pm.expect(listingSize).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Check each product has at least 1 image\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                product.variantGroups.forEach(variant => {",
													"                    pm.expect(variant.images.length).to.be.at.least(1);",
													"                })",
													"            });",
													"        });",
													"",
													"        pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
													"",
													"        const sortOptions = jsonData.sortOptions;",
													"",
													"        pm.test(\"Sort Options are not empty\", function () {",
													"            pm.expect(jsonData.sortOptions.length).to.not.eql(0);",
													"        });",
													"        ",
													"        pm.test(\"Best Sellers is set as default Sort\", function () {",
													"           var bestSellers = jsonData.sortOptions",
													"                .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"            pm.expect(bestSellers).to.not.be.undefined;",
													"        });",
													"",
													"        pm.test(\"Sort Options to have expected properties\", function () {",
													"            sortOptions.forEach(sortOption => {",
													"                pm.expect(sortOption).to.have.property(\"id\");",
													"                pm.expect(sortOption).to.have.property(\"title\");",
													"                pm.expect(sortOption).to.have.property(\"default\");",
													"            });",
													"        });",
													"",
													"        //Extracting Sorting IDs",
													"        var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"        pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
													"",
													"        const nextPath = jsonData.pagination.next;",
													"        if (nextPath) {",
													"            pm.environment.set(\"tests.var.plpNextPath\", nextPath);",
													"        } else {",
													"            postman.setNextRequest(\"[iOS] - Category PLP - Dynamically sorted - Guest\");",
													"        }",
													"    } "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PLP - Products - With offset (Pagination) - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/{{tests.var.plpNextPath}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"{{tests.var.plpNextPath}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Category PLP - Dynamically sorted - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var numberOfItems = jsonData.pagination.numberOfItems;",
													"var listingSize = jsonData.listings.length;",
													"",
													"pm.test(\"Number of items matches after sorting\", function () {",
													"    pm.expect(pm.environment.get(\"tests.var.productListPagination\")).to.eql(numberOfItems);",
													"});",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Assert filters is not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(0);",
													"});",
													"",
													"pm.test(\"PLP is not empty\", function () {",
													"    pm.expect(numberOfItems).has.to.be.above(1);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check each product has at least 1 image\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        product.variantGroups.forEach(variant => {",
													"            pm.expect(variant.images.length).to.be.at.least(1);",
													"        })",
													"    });",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"if (listingSize > 0 ) {",
													"    pm.test(\"Assert all products have a valid price\", function () {",
													"        jsonData.listings.forEach(product => {",
													"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
													"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
													"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
													"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
													"",
													"            if (product.priceRange.was) {",
													"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
													"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
													"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
													"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
													"            } ",
													"        });",
													"",
													"       pm.test(\"Was price to equal or be greater than Now price\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                if (product.priceRange.was) {",
													"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
													"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
													"                }",
													"            })",
													"            ",
													"        });",
													"        ",
													"    })",
													"}",
													"",
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"if (sortingOptionsIds && sortingOptionsIds.length > 0){",
													"    postman.setNextRequest(\"[iOS] - Category PLP - Dynamically sorted - Guest\");",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Category PLP filter by maximum and minimum price - Guest\");",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&sort={{tests.var.sortOptionId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.sortOptionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Category PLP filter by maximum and minimum price - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Filters are not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"});",
													"",
													" pm.test(\"Best Sellers is set as default Sort\", function () {",
													"    var bestSellers = jsonData.sortOptions",
													"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"    pm.expect(bestSellers).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&maxPrice=100&minPrice=1",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "maxPrice",
													"value": "100"
												},
												{
													"key": "minPrice",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Details",
							"item": [
								{
									"name": "Special Product Details",
									"item": [
										{
											"name": "[iOS] - PDP - Bundles - Guest",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var bundlesProductsIdsVar = pm.environment.get(\"tests.bundlesProductIds\");",
															"var bundlesProductsIds = bundlesProductsIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (bundlesProductsIds.length - 1));",
															"var bundlesProductId = bundlesProductsIds[random];",
															"pm.environment.set(\"tests.var.bundlesProductId\", bundlesProductId);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.bundlesProductId'));",
															"    });",
															"",
															"    pm.test(\"'isSetProduct' flag present and set to 'true' at prouduct level\", function () {",
															"        pm.expect(jsonData[0].customData.isSetProduct).to.be.true;",
															"    });",
															"",
															"    var bundleItemsLength = jsonData[0].customData.productsInSet.length;",
															"",
															"    pm.test(\"'productsInSet' to have at least 1 item as part of the bundle\", function () {",
															"        pm.expect(bundleItemsLength).to.be.greaterThan(0);",
															"    });",
															"",
															"    var listOfProductsForMultipleAddToCart = [];",
															"    var inStockVariantsIds = []",
															"",
															"    if (bundleItemsLength > 0) {",
															"        jsonData[0].customData.productsInSet.forEach(item => {            ",
															"            pm.test(`'bundleItem' : ${item.details.name} to have valid ID`, function () {",
															"                pm.expect(item.id).to.not.eql(null);",
															"                pm.expect(item.id).to.not.eql(undefined);",
															"                pm.expect(item.id).to.not.eql(\"\");",
															"            });",
															"",
															"            var itemVariantids = Object.entries(item['variants']).reduce((acc, [key, value]) => {",
															"                const currency = pm.environment.get(\"currency-code\");",
															"",
															"                if (value.stock.available) {",
															"                    inStockVariantsIds.push(",
															"                        {",
															"                            \"variantId\": value.id,",
															"                            \"productId\": item.id",
															"                        }",
															"                    );",
															"                }",
															"                ",
															"                pm.test(`'productInSet' : ${item.id} to have valid price`, function () {",
															"                    pm.expect(value.meta.defaultCurrency).to.have.eql(currency);",
															"                    if (currency === \"USD\") {",
															"                        pm.expect(typeof value.prices.USD.now).to.eql('number');",
															"                    } else {",
															"                        pm.expect(typeof value.prices.GBP.now).to.eql('number');",
															"                    }",
															"                });",
															"",
															"                pm.test(`'bundleItem' : ${item.id} to have valid image`, function () {",
															"                    pm.expect(value.images.default).to.not.eql(null);",
															"                    pm.expect(value.images.default).to.not.eql(undefined);",
															"                    pm.expect(value.images.default.length).to.be.greaterThan(0);",
															"                });",
															"",
															"                pm.test(`'bundleItem' : ${item.id} to have valid name`, function () {",
															"                    pm.expect(item.details.name).to.not.eql(null);",
															"                    pm.expect(item.details.name).to.not.eql(undefined);",
															"                    pm.expect(item.details.name).to.not.eql(\"\");",
															"                });",
															"            }, [])",
															"",
															"            if (inStockVariantsIds.length > 0) {",
															"                const randomIndex = Math.floor(Math.random() * inStockVariantsIds.length);",
															"                 listOfProductsForMultipleAddToCart.add(",
															"                    {",
															"                        \"quantity\": 1,",
															"                        \"deleted\": false,",
															"                        \"variantId\": inStockVariantsIds[randomIndex].variantId,",
															"                        \"productId\": inStockVariantsIds[randomIndex].productId",
															"                    }",
															"                )",
															"            }",
															"        });",
															"",
															"        if (listOfProductsForMultipleAddToCart.length > 0) {",
															"            pm.environment.set(\"tests.var.addToCartMultipleBody\", JSON.stringify(listOfProductsForMultipleAddToCart, null, 4));",
															"            pm.environment.set(\"tests.var.numerOfProductsAsCollection\", listOfProductsForMultipleAddToCart.length);",
															"        }",
															"    }",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - PDP - Guest\");",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.bundlesProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.bundlesProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - PDP - Multiple forms - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.multipleFormsProductId'));",
															"    });",
															"",
															"    pm.test(\"'Shade' form is present\", function () {",
															"        var shade = jsonData[0].forms.find(form => form.name === \"shade\");",
															"        pm.expect(shade).to.not.eql(undefined);",
															"    });",
															"",
															"    pm.test(\"'Undertone' form is present\", function () {",
															"        var undertone = jsonData[0].forms.find(form => form.name === \"undertone\");",
															"        pm.expect(undertone).to.not.eql(undefined);",
															"    });",
															"",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - PDP - Guest\");",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var multipleFormsProductIdsVar = pm.environment.get(\"tests.multipleFormsProductIds\");",
															"var multipleFormsProductsIds = multipleFormsProductIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (multipleFormsProductsIds.length - 1));",
															"var multipleFormsProductId = multipleFormsProductsIds[random];",
															"pm.environment.set(\"tests.var.multipleFormsProductId\", multipleFormsProductId);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.multipleFormsProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.multipleFormsProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Product & Variant ID extractor",
									"item": [
										{
											"name": "[iOS] - Get Data from variant ID - Guest",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Script that takes a ELF search page and extracts Product URLs and then from those extract the variant ID to resolve in POQ Backend (product is extracted randomly to have more coverage)",
															"",
															"const searchUrl = pm.environment.get(\"tests.websiteSearchUrl\");",
															"const regexForHtml = /(\\d+)\\.html/g;",
															"",
															"// Function to extract hrefs from HTML",
															"function extractHrefs(html) {",
															"    const hrefs = [];",
															"    const regex = /href=\"([^\"]*)\"/g;",
															"    let match;",
															"    while (match = regex.exec(html)) {",
															"        hrefs.push(match[1]);",
															"    }",
															"    return hrefs;",
															"}",
															"",
															"// Make a request to fetch the HTML content of the webpage",
															"function sendRequest() {",
															"    pm.sendRequest(searchUrl, (err, response) => {",
															"        if (err) {",
															"            console.error('Error fetching the HTML:', err);",
															"            return;",
															"        }",
															"        const html = response.text();",
															"        const hrefs = extractHrefs(html);",
															"        var filterProductsLinks = hrefs.filter(link => link.match(regexForHtml))",
															"        var randomNumber = Math.floor(Math.random() * (filterProductsLinks.length));",
															"        var URL = filterProductsLinks[randomNumber];",
															"",
															"        // Extract ID from URL",
															"        const regex = /\\d+/g;",
															"        const ID = URL.match(regex);",
															"",
															"        pm.environment.set(\"tests.var.idFromUrl\", ID);",
															"    });",
															"}",
															"",
															"sendRequest();"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is extracted\", function () {",
															"    pm.expect(jsonData.productId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"    pm.environment.set(\"tests.extactedProductIdFromUrl\", jsonData.productId);",
															"});",
															"",
															"pm.test(\"Variant Id is extracted\", function () {",
															"    pm.expect(jsonData.variantId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products/resolve?id={{tests.var.idFromUrl}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products",
														"resolve"
													],
													"query": [
														{
															"key": "id",
															"value": "{{tests.var.idFromUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - PDP - with extracted ID - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is correct\", function () {",
															"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.extactedProductIdFromUrl'));",
															"});",
															"",
															"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.null;",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.extactedProductIdFromUrl}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.extactedProductIdFromUrl}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[iOS] - PDP - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData[0].details.name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"How to use is present\", function () {",
													"    var howToUserLink = jsonData[0].meta.links.find(link => link.title === \"How to use\");",
													"    pm.expect(howToUserLink).to.not.eql(undefined);",
													"});",
													"",
													"var reviewsCount = jsonData[0].review.count;",
													"",
													"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(null);",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(undefined);",
													"});",
													"",
													"var vtoIds = []",
													"",
													"const variantids = Object.entries(jsonData[0]['variants']).reduce((acc, [key, value]) => {",
													"    const currency = pm.environment.get(\"currency-code\");",
													"    if (value.stock.available === true && value.stock.quantity > 2 ) {",
													"        pm.environment.set(\"tests.var.barcode\", value.meta.barcode);",
													"        pm.environment.set(\"tests.var.variantId\", value.id);",
													"        pm.environment.set(\"tests.var.productName\", value.name);",
													"    } else {",
													"        postman.setNextRequest(\"[iOS] - Search by keyword - Guest\");",
													"    }",
													"",
													"    if (reviewsCount > 0 ) {",
													"        pm.environment.set(\"tests.var.productIdWithReviews\", jsonData[0].id);",
													"        pm.environment.set(\"tests.var.variantIdWithReviews\", jsonData[0].meta.defaultVariantId);",
													"        pm.environment.set(\"tests.var.listingIdWithReviews\", value.listingId);",
													"        pm.environment.set(\"tests.var.numberOfReviewsFromPdp\", reviewsCount);",
													"    }",
													"   ",
													"    pm.test(`Variant images exist for variant Id ${value.id}`, function () {",
													"        pm.expect(value.images.default.length).to.not.eql(0);",
													"    });",
													"",
													"    pm.test(`'Add to bag CTA' is not null (at variant level) for variant Id ${value.id}`, function () {",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(null);",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(undefined);",
													"    });",
													"",
													"    // Extract VTO id if exists",
													"    if (value.customData.vtoID) {",
													"        vtoIds.push(value.customData.vtoID);",
													"    }",
													"",
													"    pm.test(`Price is correctly formatted for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(typeof value.prices.USD.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"$\")",
													"        } else {",
													"            pm.expect(typeof value.prices.GBP.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"£\")",
													"        }",
													"    });",
													"    ",
													"    //Max qty differs between US and UK ",
													"    pm.test(`Max quantity is correcty set for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(9)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(9)",
													"        } else {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(11)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(11)",
													"        }",
													"    });",
													"  return acc",
													"}, [])",
													"",
													"if (vtoIds.length > 0) {",
													"    var randomIndex = Math.floor(Math.random() * (vtoIds.length));",
													"    pm.environment.set(\"tests.var.vtoId\", vtoIds[randomIndex]);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.productId}}&slot-content-id=pdp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.productId}}"
												},
												{
													"key": "slot-content-id",
													"value": "pdp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PDP - UGC - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"UGC container is valid\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\")",
													"});",
													"",
													"pm.test(\"Sort Options are valid\", function () {",
													"    pm.expect(jsonData.sortOptions).to.be.an(\"array\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/usergeneratedcontent?productId={{tests.var.productId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"usergeneratedcontent"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Multiple PDPs ( Recently View) - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.recentyViewIds}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.recentyViewIds}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Notify Me",
							"item": [
								{
									"name": "[iOS] - PDP - Notify Me - Stay updated - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": true,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PDP - Notify Me - DO NOT Stay updated - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": false,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product Reviews",
							"item": [
								{
									"name": "[iOS] - Product Reviews - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"//Extracting Sorting IDs",
													"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortOptionsIds);",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(parseInt(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\")));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Add to bag - Apple Pay - Guest\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}&variantId={{tests.var.variantIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												},
												{
													"key": "variantId",
													"value": "{{tests.var.variantIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Product Reviews - Dynamically sorted - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Add to bag - Apple Pay - Guest\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.reviewsSortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.reviewSortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortingOptionsIds);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}&sort={{tests.var.reviewSortOptionId}}&variantId={{tests.var.variantIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.reviewSortOptionId}}"
												},
												{
													"key": "variantId",
													"value": "{{tests.var.variantIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Product Reviews - With offset (Pagination) - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}{{tests.var.reviewsNextPath}}",
											"host": [
												"{{tests.url}}{{tests.var.reviewsNextPath}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart",
							"item": [
								{
									"name": "Apple Pay",
									"item": [
										{
											"name": "[iOS] - Add to bag - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct product shown in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
															"});",
															"",
															"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"",
															"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Apple Pay Start - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check 'authTokn' is not null\", function () {",
															"    pm.expect(jsonData.authToken).to.not.eql(undefined);",
															"    pm.expect(jsonData.authToken).to.not.eql(null);",
															"});",
															"",
															"pm.environment.set(\"tests.var.applePayAuthToken\", jsonData.authToken);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/checkout/applepay/start",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"checkout",
														"applepay",
														"start"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Order Summary - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"pm.test(\"Check that items in the summary have isInStock as true\", function () {",
															"    jsonData.itemsSummary.forEach(item => {",
															"        pm.expect(item.isInStock).to.eql(true);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/express/checkout/orderSummary",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"orderSummary"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Invalid Shipping Address - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 424\", function () {",
															"    pm.response.to.have.status(424);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error message match with expected\", function () {",
															"    pm.expect(jsonData.message).to.eql(\"Invalid shipping address\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.invalidCountry}}\",\n\t\"state\": \"{{$randomStreetAddress}}\",\n\t\"city\": \"{{$randomCity}}\",\n\t\"postCode\": \"{{$randomBankAccount}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Shipping Address - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodsIds = jsonData.shippingMethods.map(method => method.id);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodsIds);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.country}}\",\n\t\"state\": \"{{tests.address.state}}\",\n\t\"city\": \"{{tests.address.city}}\",\n\t\"postCode\": \"{{tests.address.postCode}}\",\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Shipping method - Apple Pay - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"if (shippingMethodIds && shippingMethodIds.length > 0){",
															"    postman.setNextRequest(\"[iOS] - Set Shipping method - Apple Pay - Guest\");",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - Delete Cart - Apple Pay - Guest\");",
															"}",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"var shippingMethodId = shippingMethodIds.shift();",
															"pm.environment.set(\"tests.var.expressShippingMethodId\", shippingMethodId);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodIds);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{tests.var.expressShippingMethodId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/method",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"method"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Delete Cart - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Add to Cart - Multiple Items",
									"item": [
										{
											"name": "[iOS] - Add to bag - Multiple - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.addToCartMultipleBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items/multiple",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items",
														"multiple"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Multiple - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var totalCartQuantity = 0;",
															"",
															"var productsToDelete = [];",
															"",
															"const currencySymbol = pm.environment.get(\"tests.currencySymbol\");",
															"const currency = pm.environment.get(\"currency-code\");",
															"",
															"if (jsonData.total.now > 35) {",
															"    var formattedGiftsPromotionName = `CHOOSE 2 FREE GIFTS WITH ORDERS ${currencySymbol}35+, GET A 3rd ADDED ${currencySymbol}50+!`",
															"    const giftsPromotionObject = jsonData.customData.promotionalProducts[0].LinkedPromotion;",
															"    const bonusProducts = jsonData.customData.promotionalProducts[0].bonus_products;",
															"",
															"    pm.test(`Check Gift section is enabled for cart total ${currencySymbol}35+`, function () {",
															"        pm.expect(giftsPromotionObject).to.not.be.undefined;",
															"    });",
															"",
															"    pm.test(`Promotion name to equal with expected ${formattedGiftsPromotionName}`, function () {",
															"        pm.expect(giftsPromotionObject.name).to.eql(formattedGiftsPromotionName);",
															"    });",
															"",
															"    pm.test(`Promotion currency to equal with expected currency : ${currency}`, function () {",
															"        pm.expect(giftsPromotionObject.currency).to.eql(currency);",
															"    });",
															"",
															"    pm.test(`Bonus products exists`, function () {",
															"        pm.expect(bonusProducts).to.be.an(\"array\").and.have.length.greaterThan(0);",
															"    });",
															"",
															"    pm.test(`Bonus products to have correct properties`, function () {",
															"        bonusProducts.forEach(product => {",
															"            pm.expect(product).to.have.property(\"link\");",
															"            pm.expect(product).to.have.property(\"product_id\");",
															"            pm.expect(product).to.have.property(\"product_name\");",
															"            pm.expect(product).to.have.property(\"title\");",
															"        })",
															"    });",
															"",
															"}",
															"",
															"jsonData.cartItems.forEach(cartItem => {",
															"    totalCartQuantity += cartItem.quantity;",
															"",
															"    //collect product info to delete",
															"    productsToDelete.push(",
															"        {",
															"            \"cartItemId\": cartItem.id,",
															"            \"quantity\": 0,",
															"            \"variantId\": cartItem.variantId,",
															"            \"deleted\": true,",
															"            \"productId\": cartItem.productId",
															"        }",
															"    );",
															"});",
															"",
															"",
															"pm.test(\"Check expect numer of items is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(pm.environment.get(\"tests.var.numerOfProductsAsCollection\"));",
															"});",
															"",
															"pm.test(\"Express Checkout config is not null \", function () {",
															"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.not.be.null;",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"// Build Delete all cart object",
															"var deleteBody = ",
															"{",
															"    \"items\": productsToDelete.map(product => product)",
															"}",
															"",
															"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
															"    jsonData.cartItems.forEach(itemInCart => {",
															"        pm.expect(itemInCart.isInStock).to.be.true;",
															"    });",
															"});",
															"",
															"pm.environment.set(\"tests.var.mutipleProductsToDelete\", JSON.stringify(deleteBody, null, 4));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Delete Cart - Multiple - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.mutipleProductsToDelete}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Empty - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (!pm.environment.get(\"tests.var.addToCartMultipleBody\")) {",
													"    postman.setNextRequest(\"[iOS] - Add to bag\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[iOS] - Add to bag - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Cart - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Update Cart - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct cartId\", function () {",
													"    pm.expect(jsonData.cartId).to.eql(pm.variables.get('tests.var.initialCartId'));",
													"});",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 2,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": false,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add valid voucher code - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"// the cart can be always switched from home to c&c",
													"//pm.test(\"Cart is only Home Delivery \", function () {",
													"//    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"//    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"//});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"// Promotion ",
													"pm.test(\"Promotion code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.promotions.find(promotion => promotion.name.includes(\"EagleEye\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Voucher code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.vouchers.find(voucher => voucher.code === pm.environment.get(\"tests.var.voucherId\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"    const indexOfPromo = jsonData.vouchers.indexOf(eagleEyePromo);",
													"    pm.expect(jsonData.vouchers[indexOfPromo].status).to.eql(\"Applied\");",
													"    pm.environment.set(\"tests.var.appliedVoucherId\", jsonData.vouchers[indexOfPromo].id);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Cannot add same voucher twice - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Reward code '${pm.environment.get(\"tests.var.voucherId\")}' is invalid.`)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Checkout Start with applied voucher - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Remove voucher - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Cart is only Home Delivery \", function () {",
													"    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"",
													"",
													"pm.test(\"Vouchers are NULL\", function () {",
													"    pm.expect(jsonData.vouchers).to.eql(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedVoucherId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedVoucherId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add to INVALID voucher code - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Coupon code '${pm.environment.get(\"tests.random.voucher\")}' is invalid.`)",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomString = pm.variables.replaceIn(\"{{$randomUserName}}\");",
													"",
													"",
													"pm.environment.set(\"tests.random.voucher\", randomString);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.random.voucher}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Checkout Start - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.order.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.order.items.find(product => product.productId == pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    console.log(jsonData.url);",
													"    console.log(pm.environment.get(\"tests.checkoutUrl\"));",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Delete Cart - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Cart - Empty - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart?slot-content-id=cart",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "cart"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Invalid Add to bag due to max quantity exceeded - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Correct message is recieved\", function () {",
													"    var errorMessage = `Item quantity cannot exceed ${pm.environment.get(\"tests.maxQty\")}`",
													"    pm.expect(jsonData.message)",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var maxQty = parseInt(pm.environment.get(\"tests.maxQty\")) + 1;",
													"pm.variables.set(\"tests.var.exceedingQty\", maxQty)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": {{tests.var.exceedingQty}},\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"customData\": {\n        \"isDownload\": false,\n        \"isSubscriptionProduct\": false,\n        \"isDigital\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Stores",
							"item": [
								{
									"name": "[iOS] - Get Stores by coordinates - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lat={{tests.latitude}}&lng={{tests.longitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{tests.latitude}}"
												},
												{
													"key": "lng",
													"value": "{{tests.longitude}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Stores by ZipCode - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?q={{tests.address.postCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "q",
													"value": "{{tests.address.postCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Store detail - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct store detail is displayed\", function () {",
													"    pm.expect(jsonData.name).to.eql(pm.environment.get('tests.var.storeName'));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores/{{tests.var.externalStoreId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores",
												"{{tests.var.externalStoreId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - No Stores random by coordinates - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check stores are empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lng=1&lat={{$randomLatitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lng",
													"value": "1"
												},
												{
													"key": "lat",
													"value": "{{$randomLatitude}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Barcode Scanner",
							"item": [
								{
									"name": "[iOS] - Successful barcode scan - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData.listings[0].name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData.listings[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{tests.var.barcode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{tests.var.barcode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Invalid barcode scan - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"No products found\", function () {",
													"    pm.expect(jsonData.listings.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{$randomBankAccount}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{$randomBankAccount}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tests.var.guestAccessToken}}",
										"type": "string"
									}
								]
							}
						},
						{
							"name": "MMM - Match My Makeup",
							"item": [
								{
									"name": "[iOS] - Get token - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Token exists\", function () {",
													"    pm.expect(jsonData.token).to.be.a('string');",
													"});",
													"",
													"pm.test(\"clientId exists\", function () {",
													"    pm.expect(jsonData.clientId).to.be.a('string');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/mmm/token",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"mmm",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "VTO - Virtual Try On",
							"item": [
								{
									"name": "[iOS] - Get VTO Product Details - Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    jsonData.forEach(product => {",
													"        pm.expect(product.guid).to.eql(pm.environment.get(\"tests.var.vtoId\"));",
													"    })",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products/vto?ids={{tests.var.vtoId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"vto"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.vtoId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Logged User Journey",
					"item": [
						{
							"name": "Accounts",
							"item": [
								{
									"name": "New User Journey",
									"item": [
										{
											"name": "Register - New User",
											"item": [
												{
													"name": "[iOS] - Register new user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"tests.var.encryptedPassword\", jsonData.encryptedPassword);",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.random.email\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'isPromotion' is false\", function () {",
																	"    pm.expect(jsonData.isPromotion).to.eq(pm.environment.get(\"tests.random.boolean\"));",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var randomFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
																	"var randomLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
																	"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
																	"var randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");",
																	"var randomPhone = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");",
																	"var randomBoolean = pm.variables.replaceIn(\"{{$randomBoolean}}\");",
																	"",
																	"",
																	"randomPassword = randomPassword + \"$\";",
																	"",
																	"// Set vars",
																	"pm.environment.set(\"tests.random.firstName\", randomFirstName);",
																	"pm.environment.set(\"tests.random.lastName\", randomLastName);",
																	"pm.environment.set(\"tests.random.email\", randomEmail);",
																	"pm.environment.set(\"tests.random.password\", randomPassword);",
																	"pm.environment.set(\"tests.random.phone\", randomPhone);",
																	"pm.environment.set(\"tests.random.boolean\", randomBoolean === 'true');",
																	"",
																	"",
																	"",
																	"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
																	"const secretKey = pm.environment.get(\"secretKey\");",
																	"const poq_salt = pm.environment.get('poq-salt');",
																	"",
																	"",
																	"function buildRequestBody(){",
																	"    const body = ",
																	"    {",
																	"       profile: {",
																	"\t\tphone: randomPhone,",
																	"\t\tfirstName: randomFirstName,",
																	"\t\tbirthday: \"2008-01-17\",",
																	"\t\temail: randomEmail,",
																	"\t\tisPromotion: randomBoolean === 'true',",
																	"\t\tencryptedPassword: randomPassword,",
																	"\t\tlastName: randomLastName",
																	"\t},",
																	"\tcredentials: {",
																	"\t\tusername: randomEmail,",
																	"\t\tpassword: randomPassword",
																	"\t},",
																	"\tisPromotion: randomBoolean === 'true'",
																	"    }",
																	"    return JSON.stringify(body);",
																	"    //Register doesn't require spaces while LOGIN does!!",
																	"}",
																	"",
																	"console.log(buildRequestBody())",
																	"",
																	"const theIterations = 1000;",
																	"const theOutputKeyLength = 16;",
																	"",
																	"function getSecretKey(key, salt, iterations) {",
																	"    const hasher = CryptoJS.algo.SHA256.create();",
																	"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																	"        keySize: 256 / 32,",
																	"        iterations: iterations,",
																	"        hasher: hasher",
																	"    });",
																	"    return derivedKey;",
																	"}",
																	"",
																	"function getBytes(input) {",
																	"    return CryptoJS.enc.Utf8.parse(input);",
																	"}",
																	"",
																	"function signRequest() {",
																	"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																	"    const saltBytes = getBytes(poq_salt);",
																	"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																	"    const body = buildRequestBody();",
																	"    const input = body + poqUserId;",
																	"    hashInputBytes = getBytes(input);",
																	"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																	"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																	"",
																	"    pm.request.headers.add({",
																	"        key: 'poq-auth',",
																	"        value: signedEncoded",
																	"    });",
																	"}",
																	"",
																	"signRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept-encoding": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\"profile\":{\"phone\":\"{{tests.random.phone}}\",\"firstName\":\"{{tests.random.firstName}}\",\"birthday\":\"2008-01-17\",\"email\":\"{{tests.random.email}}\",\"isPromotion\":{{tests.random.boolean}},\"encryptedPassword\":\"{{tests.random.password}}\",\"lastName\":\"{{tests.random.lastName}}\"},\"credentials\":{\"username\":\"{{tests.random.email}}\",\"password\":\"{{tests.random.password}}\"},\"isPromotion\":{{tests.random.boolean}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/account/register/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"account",
																"register",
																"{{poq-app-id}}",
																"{{tests.ios.poq-user-id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "My account",
											"item": [
												{
													"name": "[iOS] - Account Details - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check if content is not null\", function () {",
																	"    pm.expect(jsonData.length).to.not.eq(null);",
																	"});",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.random.email\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'isPromotion' is false\", function () {",
																	"    pm.expect(jsonData.isPromotion).to.eq(pm.environment.get(\"tests.random.boolean\"));",
																	"});",
																	"",
																	"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
																	"var cookies = jsonData.cookies;",
																	"",
																	"pm.test(\"Check cookies domain matches with client one\", function () {",
																	"    cookies.forEach(cookie => ",
																	"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
																	"    )",
																	"});",
																	"",
																	"// Collect cookies ",
																	"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
																	"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/account/details/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"account",
																"details",
																"{{poq-app-id}}",
																"{{tests.ios.poq-user-id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Account Content - New User",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/ContentBlocks/{{poq-app-id}}/1",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"ContentBlocks",
																"{{poq-app-id}}",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Account Profile - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.random.email\").toLowerCase());",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
																	"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/v1/loyalty/userprofile",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"v1",
																"loyalty",
																"userprofile"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Loyalty Rewards - Get Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/rewards-widgets",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"rewards-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Loyalty Rewards - Load Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"",
																	"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[iOS] - Loyalty Rewards - Load Widgets - New User\");",
																	"} else {",
																	"    postman.setNextRequest(\"[iOS] - Points Activities - Get Widgets - New User\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"var rewardGroupingId = rewardGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"v1",
																"loyalty",
																"rewards"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.rewardGroupingId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Points Activities - Get Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/activities-widgets",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"activities-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Points Activities - Load Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[iOS] - Points Activities - Load Widgets - New User\");",
																	"} else {",
																	"    postman.setNextRequest(\"[iOS] - Log In User - Invalid Credentials\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"var activityGroupingId = activitiesGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"activities"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.activityGroupingId}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "basic",
												"basic": [
													{
														"key": "username",
														"value": "{{tests.random.email}}",
														"type": "string"
													},
													{
														"key": "password",
														"value": "{{tests.var.encryptedPassword}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															" pm.request.headers.add({",
															"    key: 'poq-auth',",
															"    value: \"{{tests.var.poq-auth}}\"",
															" });"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Login",
									"item": [
										{
											"name": "[iOS] - Log In User - Invalid Credentials",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
															"const secretKey = pm.environment.get(\"secretKey\");",
															"const poq_salt = pm.environment.get('poq-salt');",
															"",
															"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
															"pm.environment.set(\"tests.random.email\", randomEmail);",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: randomEmail,",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct error message is being displayed\", function () {",
															"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"tests.messages.invalidLogin\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.random.email}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Log In User - Invalid auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
															"const uuid = require(\"uuid\");",
															"const secretKey = uuid.v4();",
															"const poq_salt = uuid.v4();",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: pm.environment.get('tests.existingUserEmail'),",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n\t\"password\": \"{{tests.existingUserPassword}}\",\n\t\"username\": \"{{$randomEmail}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Log In User",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
															"const secretKey = pm.environment.get(\"secretKey\");",
															"const poq_salt = pm.environment.get('poq-salt');",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: pm.environment.get('tests.existingUserEmail'),",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"",
															"    pm.environment.set(\"tests.var.poq-auth\", signedEncoded);",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"pm.environment.set(\"tests.var.encryptedPassword\", jsonData.encryptedPassword);",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if 'isPromotion' is false\", function () {",
															"    pm.expect(jsonData.isPromotion).to.eq(false);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept-encoding": true
												}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.existingUserEmail}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "My account",
									"item": [
										{
											"name": "[iOS] - Account Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if content is not null\", function () {",
															"    pm.expect(jsonData.length).to.not.eq(null);",
															"});",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if 'isPromotion' is false\", function () {",
															"    pm.expect(jsonData.isPromotion).to.eq(false);",
															"});",
															"",
															"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
															"var cookies = jsonData.cookies;",
															"",
															"pm.test(\"Check cookies domain matches with client one\", function () {",
															"    cookies.forEach(cookie => ",
															"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
															"    )",
															"});",
															"",
															"// Collect cookies ",
															"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
															"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/details/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"details",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Account Content",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/ContentBlocks/{{poq-app-id}}/1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"ContentBlocks",
														"{{poq-app-id}}",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Account Profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
															"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/v1/loyalty/userprofile",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"v1",
														"loyalty",
														"userprofile"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Loyalty Rewards - Get Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/rewards-widgets",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"rewards-widgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Loyalty Rewards - Load Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
															"",
															"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
															"    postman.setNextRequest(\"[iOS] - Loyalty Rewards - Load Widgets\");",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - Points Activities - Get Widgets\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
															"var rewardGroupingId = rewardGroupingIds.shift();",
															"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
															"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
															"",
															"pm.request.headers.add({",
															"  key: 'external-cookies-string',",
															"  value: '{{test.var.externalCookiesRaw}}'",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"v1",
														"loyalty",
														"rewards"
													],
													"query": [
														{
															"key": "groupingId",
															"value": "{{tests.var.rewardGroupingId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Points Activities - Get Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/activities-widgets",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"activities-widgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Points Activities - Load Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
															"",
															"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
															"    postman.setNextRequest(\"[iOS] - Points Activities - Load Widgets\");",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - Banners - No labels\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
															"",
															"var activityGroupingId = activitiesGroupingIds.shift();",
															"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
															"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
															"",
															"pm.request.headers.add({",
															"  key: 'external-cookies-string',",
															"  value: '{{test.var.externalCookiesRaw}}'",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"activities"
													],
													"query": [
														{
															"key": "groupingId",
															"value": "{{tests.var.activityGroupingId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Award login activity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if awarded\", function () {",
															"    pm.expect(jsonData.awarded).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{tests.existingUserEmail}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{tests.var.encryptedPassword}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"activity_id\": {{tests.activities.login}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/awardactivity",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"awardactivity"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "basic",
										"basic": [
											{
												"key": "password",
												"value": "{{tests.var.encryptedPassword}}",
												"type": "string"
											},
											{
												"key": "username",
												"value": "{{tests.existingUserEmail}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													" pm.request.headers.add({",
													"    key: 'poq-auth',",
													"    value: \"{{tests.var.poq-auth}}\"",
													" });"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "New Account SDK",
									"item": [
										{
											"name": "Guest Token",
											"item": [
												{
													"name": "[iOS] - Guest Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"pm.environment.set(\"tests.var.accessToken\", jsonData.accessToken);",
																	"pm.environment.set(\"tests.var.refreshToken\", jsonData.refreshToken);",
																	"",
																	"",
																	"pm.test(\"Check if access token is not null\", function () {",
																	"    pm.expect(jsonData.accessToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check if refresh token is not null\", function () {",
																	"    pm.expect(jsonData.refreshToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check external user ID is not null\", function () {",
																	"    pm.expect(jsonData.externalUserId).to.not.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{tests.url.v2}}/account/guest-token",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"guest-token"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Refresh Guest Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"pm.environment.set(\"tests.var.accessToken\", jsonData.accessToken);",
																	"pm.environment.set(\"tests.var.refreshToken\", jsonData.refreshToken);",
																	"",
																	"",
																	"pm.test(\"Check if access token is not null\", function () {",
																	"    pm.expect(jsonData.accessToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check if refresh token is not null\", function () {",
																	"    pm.expect(jsonData.refreshToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check external user ID is not null\", function () {",
																	"    pm.expect(jsonData.externalUserId).to.not.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"refreshToken\": \"{{tests.var.refreshToken}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/refresh-token",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"refresh-token"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "New User Journey",
											"item": [
												{
													"name": "Register - New User",
													"item": [
														{
															"name": "[iOS] - Register new user",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json();",
																			"pm.environment.set(\"tests.var.registerAccessToken\", jsonData.accessToken);",
																			"pm.environment.set(\"tests.var.registerRefreshToken\", jsonData.refreshToken);",
																			"",
																			"pm.test(\"Check if access token is not null\", function () {",
																			"    pm.expect(jsonData.accessToken).to.not.be.null;",
																			"});",
																			"",
																			"pm.test(\"Check if refresh token is not null\", function () {",
																			"    pm.expect(jsonData.refreshToken).to.not.be.null;",
																			"});",
																			"",
																			"pm.test(\"Check external user ID is not null\", function () {",
																			"    pm.expect(jsonData.externalUserId).to.not.be.null;",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var randomFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
																			"var randomLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
																			"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
																			"var randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");",
																			"var randomPhone = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");",
																			"var randomBoolean = pm.variables.replaceIn(\"{{$randomBoolean}}\");",
																			"",
																			"",
																			"randomPassword = randomPassword + \"5$\";",
																			"",
																			"// Set vars",
																			"pm.environment.set(\"tests.random.firstName\", randomFirstName);",
																			"pm.environment.set(\"tests.random.lastName\", randomLastName);",
																			"pm.environment.set(\"tests.random.email\", randomEmail);",
																			"pm.environment.set(\"tests.random.password\", randomPassword);",
																			"pm.environment.set(\"tests.random.phone\", randomPhone);",
																			"pm.environment.set(\"tests.random.boolean\", randomBoolean === 'true');",
																			"",
																			"",
																			"",
																			"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
																			"const secretKey = pm.environment.get(\"secretKey\");",
																			"const poq_salt = pm.environment.get('poq-salt');",
																			"",
																			"",
																			"function buildRequestBody(){",
																			"    const body = ",
																			"    {",
																			"       profile: {",
																			"\t\tphone: randomPhone,",
																			"\t\tfirstName: randomFirstName,",
																			"\t\tbirthday: \"2008-01-17\",",
																			"\t\temail: randomEmail,",
																			"\t\tisPromotion: randomBoolean === 'true',",
																			"\t\tencryptedPassword: randomPassword,",
																			"\t\tlastName: randomLastName",
																			"\t},",
																			"\tcredentials: {",
																			"\t\tusername: randomEmail,",
																			"\t\tpassword: randomPassword",
																			"\t},",
																			"\tisPromotion: randomBoolean === 'true'",
																			"    }",
																			"    return JSON.stringify(body);",
																			"    //Register doesn't require spaces while LOGIN does!!",
																			"}",
																			"",
																			"console.log(buildRequestBody())",
																			"",
																			"const theIterations = 1000;",
																			"const theOutputKeyLength = 16;",
																			"",
																			"function getSecretKey(key, salt, iterations) {",
																			"    const hasher = CryptoJS.algo.SHA256.create();",
																			"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																			"        keySize: 256 / 32,",
																			"        iterations: iterations,",
																			"        hasher: hasher",
																			"    });",
																			"    return derivedKey;",
																			"}",
																			"",
																			"function getBytes(input) {",
																			"    return CryptoJS.enc.Utf8.parse(input);",
																			"}",
																			"",
																			"function signRequest() {",
																			"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																			"    const saltBytes = getBytes(poq_salt);",
																			"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																			"    const body = buildRequestBody();",
																			"    const input = body + poqUserId;",
																			"    hashInputBytes = getBytes(input);",
																			"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																			"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																			"",
																			"    pm.request.headers.add({",
																			"        key: 'poq-auth',",
																			"        value: signedEncoded",
																			"    });",
																			"}",
																			"",
																			"signRequest();"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"user-agent": true,
																	"accept-encoding": true
																}
															},
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\"profile\":{\"phone\":\"{{tests.random.phone}}\",\"firstName\":\"{{tests.random.firstName}}\",\"birthday\":\"2008-01-17\",\"email\":\"{{tests.random.email}}\",\"isPromotion\":{{tests.random.boolean}},\"encryptedPassword\":\"{{tests.random.password}}\",\"lastName\":\"{{tests.random.lastName}}\"},\"credentials\":{\"username\":\"{{tests.random.email}}\",\"password\":\"{{tests.random.password}}\"},\"isPromotion\":{{tests.random.boolean}}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url.v2}}/account/register",
																	"host": [
																		"{{tests.url.v2}}"
																	],
																	"path": [
																		"account",
																		"register"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "My account",
													"item": [
														{
															"name": "[iOS] - Account Details - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json();",
																			"",
																			"pm.test(\"Check if content is not null\", function () {",
																			"    pm.expect(jsonData.length).to.not.eq(null);",
																			"});",
																			"",
																			"pm.test(\"Check if 'email' matches\", function () {",
																			"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.random.email\"));",
																			"});",
																			"",
																			"pm.test(\"Check if 'firstName' matches\", function () {",
																			"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																			"});",
																			"",
																			"pm.test(\"Check if 'lastName' matches\", function () {",
																			"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																			"});",
																			"",
																			"pm.test(\"Check if 'isPromotion' is false\", function () {",
																			"    pm.expect(jsonData.isPromotion).to.eq(pm.environment.get(\"tests.random.boolean\"));",
																			"});",
																			"",
																			"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
																			"var cookies = jsonData.cookies;",
																			"",
																			"pm.test(\"Check cookies domain matches with client one\", function () {",
																			"    cookies.forEach(cookie => ",
																			"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
																			"    )",
																			"});",
																			"",
																			"// Collect cookies ",
																			"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
																			"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/account/details/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"account",
																		"details",
																		"{{poq-app-id}}",
																		"{{tests.ios.poq-user-id}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Account Content - New User",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/ContentBlocks/{{poq-app-id}}/1",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"ContentBlocks",
																		"{{poq-app-id}}",
																		"1"
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Account Profile - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json();",
																			"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
																			"",
																			"pm.test(\"Check if 'email' matches\", function () {",
																			"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.random.email\").toLowerCase());",
																			"});",
																			"",
																			"pm.test(\"Check if 'firstName' matches\", function () {",
																			"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																			"});",
																			"",
																			"pm.test(\"Check if 'lastName' matches\", function () {",
																			"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																			"});",
																			"",
																			"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
																			"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/v1/loyalty/userprofile",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"v1",
																		"loyalty",
																		"userprofile"
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Loyalty Rewards - Get Widgets - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json()",
																			"",
																			"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/loyalty/rewards-widgets",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"loyalty",
																		"rewards-widgets"
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Loyalty Rewards - Load Widgets - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																			"",
																			"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
																			"    postman.setNextRequest(\"[iOS] - Loyalty Rewards - Load Widgets - New User\");",
																			"} else {",
																			"    postman.setNextRequest(\"[iOS] - Points Activities - Get Widgets - New User\");",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																			"var rewardGroupingId = rewardGroupingIds.shift();",
																			"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
																			"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
																			"",
																			"pm.request.headers.add({",
																			"  key: 'external-cookies-string',",
																			"  value: '{{test.var.externalCookiesRaw}}'",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"v1",
																		"loyalty",
																		"rewards"
																	],
																	"query": [
																		{
																			"key": "groupingId",
																			"value": "{{tests.var.rewardGroupingId}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Points Activities - Get Widgets - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"const jsonData = pm.response.json()",
																			"",
																			"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/loyalty/activities-widgets",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"loyalty",
																		"activities-widgets"
																	]
																}
															},
															"response": []
														},
														{
															"name": "[iOS] - Points Activities - Load Widgets - New User",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																			"",
																			"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
																			"    postman.setNextRequest(\"[iOS] - Points Activities - Load Widgets - New User\");",
																			"} else {",
																			"    postman.setNextRequest(\"[iOS] - Log In User - Invalid Credentials\");",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																			"",
																			"var activityGroupingId = activitiesGroupingIds.shift();",
																			"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
																			"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
																			"",
																			"pm.request.headers.add({",
																			"  key: 'external-cookies-string',",
																			"  value: '{{test.var.externalCookiesRaw}}'",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{tests.url}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
																	"host": [
																		"{{tests.url}}"
																	],
																	"path": [
																		"loyalty",
																		"activities"
																	],
																	"query": [
																		{
																			"key": "groupingId",
																			"value": "{{tests.var.activityGroupingId}}"
																		}
																	]
																}
															},
															"response": []
														}
													],
													"auth": {
														"type": "bearer",
														"bearer": [
															{
																"key": "token",
																"value": "{{tests.var.registerAccessToken}}",
																"type": "string"
															}
														]
													},
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"type": "text/javascript",
																"exec": [
																	" pm.request.headers.add({",
																	"    key: 'poq-auth',",
																	"    value: \"{{tests.var.poq-auth}}\"",
																	" });"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													]
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{tests.var.accessToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Login",
											"item": [
												{
													"name": "[iOS] - Log In User - Invalid Credentials",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
																	"const secretKey = pm.environment.get(\"secretKey\");",
																	"const poq_salt = pm.environment.get('poq-salt');",
																	"",
																	"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
																	"pm.environment.set(\"tests.random.email\", randomEmail);",
																	"",
																	"function buildRequestBody(){",
																	"    const body = {",
																	"        isMasterCard: false,",
																	"        username: randomEmail,",
																	"        password: pm.environment.get('tests.existingUserPassword')",
																	"    }",
																	"    return JSON.stringify(body, null, 4);",
																	"}",
																	"",
																	"const theIterations = 1000;",
																	"const theOutputKeyLength = 16;",
																	"",
																	"function getSecretKey(key, salt, iterations) {",
																	"    const hasher = CryptoJS.algo.SHA256.create();",
																	"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																	"        keySize: 256 / 32,",
																	"        iterations: iterations,",
																	"        hasher: hasher",
																	"    });",
																	"    return derivedKey;",
																	"}",
																	"",
																	"function getBytes(input) {",
																	"    return CryptoJS.enc.Utf8.parse(input);",
																	"}",
																	"",
																	"function signRequest() {",
																	"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																	"    const saltBytes = getBytes(poq_salt);",
																	"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																	"    const body = buildRequestBody();",
																	"    const input = body + poqUserId;",
																	"    hashInputBytes = getBytes(input);",
																	"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																	"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																	"",
																	"    pm.request.headers.add({",
																	"        key: 'poq-auth',",
																	"        value: signedEncoded",
																	"    });",
																	"}",
																	"",
																	"signRequest();"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check correct error message is being displayed\", function () {",
																	"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"tests.messages.invalidLogin\"));",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.random.email}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/login",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Log In User - Invalid auth",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
																	"const uuid = require(\"uuid\");",
																	"const secretKey = uuid.v4();",
																	"const poq_salt = uuid.v4();",
																	"",
																	"function buildRequestBody(){",
																	"    const body = {",
																	"        isMasterCard: false,",
																	"        username: pm.environment.get('tests.existingUserEmail'),",
																	"        password: pm.environment.get('tests.existingUserPassword')",
																	"    }",
																	"    return JSON.stringify(body, null, 4);",
																	"}",
																	"",
																	"const theIterations = 1000;",
																	"const theOutputKeyLength = 16;",
																	"",
																	"function getSecretKey(key, salt, iterations) {",
																	"    const hasher = CryptoJS.algo.SHA256.create();",
																	"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																	"        keySize: 256 / 32,",
																	"        iterations: iterations,",
																	"        hasher: hasher",
																	"    });",
																	"    return derivedKey;",
																	"}",
																	"",
																	"function getBytes(input) {",
																	"    return CryptoJS.enc.Utf8.parse(input);",
																	"}",
																	"",
																	"function signRequest() {",
																	"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																	"    const saltBytes = getBytes(poq_salt);",
																	"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																	"    const body = buildRequestBody();",
																	"    const input = body + poqUserId;",
																	"    hashInputBytes = getBytes(input);",
																	"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																	"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																	"",
																	"    pm.request.headers.add({",
																	"        key: 'poq-auth',",
																	"        value: signedEncoded",
																	"    });",
																	"}",
																	"",
																	"signRequest();"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 403\", function () {",
																	"    pm.response.to.have.status(403);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"isMasterCard\": false,\n\t\"password\": \"{{tests.existingUserPassword}}\",\n\t\"username\": \"{{$randomEmail}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/login",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"login"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Log In User",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
																	"const secretKey = pm.environment.get(\"secretKey\");",
																	"const poq_salt = pm.environment.get('poq-salt');",
																	"",
																	"function buildRequestBody(){",
																	"    const body = {",
																	"        isMasterCard: false,",
																	"        username: pm.environment.get('tests.existingUserEmail'),",
																	"        password: pm.environment.get('tests.existingUserPassword')",
																	"    }",
																	"    return JSON.stringify(body, null, 4);",
																	"}",
																	"",
																	"const theIterations = 1000;",
																	"const theOutputKeyLength = 16;",
																	"",
																	"function getSecretKey(key, salt, iterations) {",
																	"    const hasher = CryptoJS.algo.SHA256.create();",
																	"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																	"        keySize: 256 / 32,",
																	"        iterations: iterations,",
																	"        hasher: hasher",
																	"    });",
																	"    return derivedKey;",
																	"}",
																	"",
																	"function getBytes(input) {",
																	"    return CryptoJS.enc.Utf8.parse(input);",
																	"}",
																	"",
																	"function signRequest() {",
																	"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																	"    const saltBytes = getBytes(poq_salt);",
																	"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																	"    const body = buildRequestBody();",
																	"    const input = body + poqUserId;",
																	"    hashInputBytes = getBytes(input);",
																	"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																	"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																	"",
																	"    pm.request.headers.add({",
																	"        key: 'poq-auth',",
																	"        value: signedEncoded",
																	"    });",
																	"",
																	"    pm.environment.set(\"tests.var.poq-auth\", signedEncoded);",
																	"}",
																	"",
																	"signRequest();"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"pm.environment.set(\"tests.var.loginAccessToken\", jsonData.accessToken);",
																	"pm.environment.set(\"tests.var.loginRefreshToken\", jsonData.refreshToken);",
																	"",
																	"pm.test(\"Check if access token is not null\", function () {",
																	"    pm.expect(jsonData.accessToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check if refresh token is not null\", function () {",
																	"    pm.expect(jsonData.refreshToken).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Check external user ID is not null\", function () {",
																	"    pm.expect(jsonData.externalUserId).to.not.be.null;",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept-encoding": true
														}
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.existingUserEmail}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/login",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"login"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{tests.var.accessToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"packages": {},
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "My account",
											"item": [
												{
													"name": "[iOS] - Account Details",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check if content is not null\", function () {",
																	"    pm.expect(jsonData.length).to.not.eq(null);",
																	"});",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
																	"});",
																	"",
																	"pm.test(\"Check if 'isPromotion' is false\", function () {",
																	"    pm.expect(jsonData.isPromotion).to.eq(false);",
																	"});",
																	"",
																	"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
																	"var cookies = jsonData.cookies;",
																	"",
																	"pm.test(\"Check cookies domain matches with client one\", function () {",
																	"    cookies.forEach(cookie => ",
																	"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
																	"    )",
																	"});",
																	"",
																	"// Collect cookies ",
																	"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
																	"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/details",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"details"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Account Content",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.profile.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.profile.firstName).to.eq(\"Elf\");",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.profile.lastName).to.eq(\"Postman Tests\");",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/account/content",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"account",
																"content"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Account Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
																	"});",
																	"",
																	"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
																	"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/v1/loyalty/userprofile",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"v1",
																"loyalty",
																"userprofile"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Loyalty Rewards - Get Widgets",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/loyalty/rewards-widgets",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"loyalty",
																"rewards-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Loyalty Rewards - Load Widgets",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"",
																	"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[iOS] - Loyalty Rewards - Load Widgets\");",
																	"} else {",
																	"    postman.setNextRequest(\"[iOS] - Points Activities - Get Widgets\");",
																	"}"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"var rewardGroupingId = rewardGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"v1",
																"loyalty",
																"rewards"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.rewardGroupingId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Points Activities - Get Widgets",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/loyalty/activities-widgets",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"loyalty",
																"activities-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Points Activities - Load Widgets",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[iOS] - Points Activities - Load Widgets\");",
																	"} else {",
																	"    postman.setNextRequest(\"[iOS] - Banners - No labels\");",
																	"}"
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"var activityGroupingId = activitiesGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"loyalty",
																"activities"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.activityGroupingId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "[iOS] - Award login activity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check if awarded\", function () {",
																	"    pm.expect(jsonData.awarded).to.be.true;",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"activity_id\": {{tests.activities.login}}\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url.v2}}/loyalty/awardactivity",
															"host": [
																"{{tests.url.v2}}"
															],
															"path": [
																"loyalty",
																"awardactivity"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{tests.var.loginAccessToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															" pm.request.headers.add({",
															"    key: 'poq-auth',",
															"    value: \"{{tests.var.poq-auth}}\"",
															" });"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Settings & Launch",
									"item": [
										{
											"name": "[iOS] - Splash request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"const poq_salt = jsonData.config.find(config => config.key === \"fragmentSuffix\").value;",
															"pm.environment.set(\"poq-salt\", poq_salt);",
															"",
															"pm.test(\"Localization array is not empty\", function () {",
															"    pm.expect(jsonData.localization.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Theme array is not empty\", function () {",
															"    pm.expect(jsonData.theme.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Config array is not empty\", function () {",
															"    pm.expect(jsonData.config.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.ios.versionCode\")}`, function () {",
															"    var forceUpdateConfigValue = jsonData.config.find(config => config.key === \"forceUpdate\").value;",
															"    pm.expect(forceUpdateConfigValue).to.eql('false');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Generate random poq-user-id on the first running request",
															"",
															"var uuid = require('uuid');",
															"var poqUserId = uuid.v4();",
															"pm.environment.set(\"tests.ios.poq-user-id\", poqUserId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/splash/ios/{{poq-app-id}}/3?poqUserId={{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"splash",
														"ios",
														"{{poq-app-id}}",
														"3"
													],
													"query": [
														{
															"key": "poqUserId",
															"value": "{{tests.ios.poq-user-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Launch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Force update is not applied on current app version\", function () {",
															"    pm.expect(jsonData.forceUpdate).to.be.null;",
															"});",
															"",
															"pm.test(\"Validate the onboarding object\", function () {",
															"  pm.expect(jsonData).to.be.an('object');",
															"  pm.expect(jsonData.onboarding).to.exist.and.to.be.an('object');",
															"});",
															"",
															"",
															"pm.test(\"Verify that the onboarding ID is a non-empty string\", function () {",
															"  pm.expect(jsonData).to.be.an('object');",
															"  pm.expect(jsonData.onboarding.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
															"});",
															"",
															"",
															"pm.test(\"Response has the required fields\", function () {",
															"    pm.expect(jsonData).to.be.an('object');",
															"    pm.expect(jsonData).to.have.all.keys('forceUpdate', 'maintenance', 'onboarding', 'customData');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var isRegressionRunVar = pm.environment.get(\"tests.isRegressionRun\");",
															"var isRegressionRun = (isRegressionRunVar.toLowerCase() === \"true\"); ",
															"if (!isRegressionRun) {",
															"    postman.setNextRequest(\"[iOS] - Log In User - Invalid Credentials\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/launch?appVersion={{tests.ios.appVersion}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"launch"
													],
													"query": [
														{
															"key": "appVersion",
															"value": "{{tests.ios.appVersion}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Banners",
							"item": [
								{
									"name": "[iOS] - Banners - No labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Online",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=online",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "online"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Cosmetics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=cosmetics",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "cosmetics"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Banners - Skin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=skin",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "skin"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "App Stories",
							"item": [
								{
									"name": "[iOS] - App Stories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Stories array is not empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.stories.length).to.not.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/appstories/apps/{{poq-app-id}}/home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"appstories",
												"apps",
												"{{poq-app-id}}",
												"home"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Catalogue",
							"item": [
								{
									"name": "Search by Keyword Sort and Filters",
									"item": [
										{
											"name": "[iOS] - Predictive Search",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check categories is not empty\", function () {",
															"    pm.expect(jsonData.categories.length).to.be.above(0);",
															"});",
															"",
															"pm.test(\"Check category title property exists\", function () {",
															"   pm.expect(jsonData.categories[0]).to.have.property('title');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate predictive results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.predictiveSearchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.predictiveSearchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search/predictive?keyword={{tests.var.predictiveSearchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search",
														"predictive"
													],
													"query": [
														{
															"key": "keyword",
															"value": "{{tests.var.predictiveSearchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search by keyword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"//Extracting Sorting IDs",
															"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}",
															"",
															"// Store product ID which are stock available to true",
															"var productIds = [];",
															"var listingIds = [];",
															"var productNames = [];",
															"var variationIds = [];",
															"",
															"var productList = jsonData.listings;",
															"",
															"if (productList.length === 0) {",
															"    postman.setNextRequest(\"[iOS] - Search by keyword\");",
															"}",
															"",
															"for (var i=0; i < productList.length; i++)",
															"{",
															"    var variantGroups = productList[i].variantGroups;",
															"    for (var j=0; j < variantGroups.length; j++)",
															"    {",
															"        if ((variantGroups[j].stock && variantGroups[j].stock.available === true)) {",
															"            productIds.push(productList[i].productId)",
															"            listingIds.push(productList[i].id)",
															"            if (productList[i].variantGroups[j].formVariationIds) {",
															"                variationIds.push(productList[i].variantGroups[j].formVariationIds[0])",
															"            } else {",
															"                var listingId = productList[i].id.split(\"-poqListingId-\");",
															"                variationIds.push(listingId[1]);",
															"            }",
															"            productNames.push(productList[i].name)",
															"        }",
															"    }",
															"}",
															"",
															"",
															"// Pick a random number within productIds array length to extact a random product at run time ",
															"var randomNumber = Math.floor(Math.random() * (productIds.length));",
															"",
															"pm.environment.set(\"tests.var.productId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.listingId\", listingIds[randomNumber]);",
															"pm.environment.set(\"tests.var.productName\", productNames[randomNumber]);",
															"pm.environment.set(\"tests.var.variantId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.variantGroupId\", variationIds[randomNumber]);",
															"",
															"// Fill a list of ids to be used to simulate \"Recently View\" carrousel",
															"pm.environment.set(\"tests.var.recentyViewIds\", Object.values(productIds));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate PLP results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.searchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.searchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search PLP - Dynamically sorted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Listings is not empty\", function () {",
															"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Filters are not empty\", function () {",
															"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
															"",
															"var sortingOptionId = sortingOptionsIds.shift();",
															"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&sort={{tests.var.sortOptionId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "sort",
															"value": "{{tests.var.sortOptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Search PLP filter by maximum and minimum price Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Listings is not empty\", function () {",
															"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Filters are not empty\", function () {",
															"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&maxPrice=100&minPrice=1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "maxPrice",
															"value": "100"
														},
														{
															"key": "minPrice",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[iOS] - Shop",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"const allCategories = [];",
													"",
													"pm.test(\"Verify that the 'categories' array is present and not empty\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData.categories).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Catgories array should not be empty\");",
													"});",
													"",
													"const getAllCategoriesObjects = array => array.flatMap(category => {",
													"    if (Array.isArray(category.categories) && category.categories.length > 0) {",
													"       return getAllCategoriesObjects(category.categories)",
													"    } else {",
													"       allCategories.push(category);",
													"   }",
													"})",
													"",
													"pm.test(\"Verify that the 'categories' have all properties correctly evaluated\", function () {",
													"    getAllCategoriesObjects(jsonData.categories);",
													"    allCategories.forEach(category => {",
													"        pm.expect(category).to.exist.and.to.be.an('object')",
													"        pm.expect(category.id).to.not.eql(null);",
													"        pm.expect(category.id).to.have.lengthOf.at.least(1, \"'id' should not be empty\");",
													"        pm.expect(category.name).to.not.eql(null);",
													"        pm.expect(category.name).to.have.lengthOf.at.least(1, \"'name' should not be empty\");",
													"    })",
													"});",
													"",
													"// Get all sub categories and randomised",
													"const getIds = arr => (",
													"    arr.flatMap(                // iterate using \".flatMap()\" to avoid nesting",
													"        ({ id, categories }) => {   // de-structure to directly access \"id\" & \"categories\"",
													"            if (                    // if \"categories\" is not empty, recurse to next level",
													"                Array.isArray(categories) &&",
													"                categories.length > 0",
													"            ) {",
													"                return getIds(categories);",
													"            } else {                // if it is empty, return the id",
													"                return id;",
													"            }",
													"        }",
													"    )",
													");",
													"",
													"var subCategories = getIds(jsonData.categories);",
													"const random = Math.floor(Math.random() * subCategories.length);",
													"",
													"pm.environment.set(\"tests.var.subCategoryId\", subCategories[random]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/shop?slot-content-id=shop",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"shop"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "shop"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PLP - Products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var listingSize = jsonData.listings.length;",
													"",
													"// Check if PLP has item greater then 3 and retry for maximum 10 times ",
													"// If it doesn't then it executes '[iOS] - Shop' request which in turn is the one selecting a random category",
													"",
													"const maxNumberOfTries = 10;",
													"if (!pm.environment.get(\"tests.var.tries\")) {  ",
													"    pm.environment.set(\"tests.var.tries\", 1);",
													"}",
													"    ",
													"if ((jsonData.pagination.numberOfItems < 3) && (pm.environment.get(\"tests.var.tries\") < maxNumberOfTries)) {",
													"        const tries = parseInt(pm.environment.get(\"tests.var.tries\"), 10);",
													"        pm.environment.set(\"tests.var.tries\", tries + 1);",
													"        postman.setNextRequest(\"[iOS] - Shop\");",
													"    } else {",
													"        pm.environment.unset(\"tests.var.tries\");",
													"",
													"        pm.test(\"Assert listings is not empty\", function () {",
													"            pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"        });",
													"",
													"        pm.test(\"Assert filters is not empty\", function () {",
													"            pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"        });",
													"",
													"        var numberOfItems = jsonData.pagination.numberOfItems;",
													"",
													"        pm.test(\"Check PLP is not empty\", function () {",
													"            pm.expect(listingSize).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Check each product has at least 1 image\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                product.variantGroups.forEach(variant => {",
													"                    pm.expect(variant.images.length).to.be.at.least(1);",
													"                })",
													"            });",
													"        });",
													"",
													"        pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
													"",
													"        const sortOptions = jsonData.sortOptions;",
													"",
													"        pm.test(\"Sort Options are not empty\", function () {",
													"            pm.expect(jsonData.sortOptions.length).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Best Sellers is set as default Sort\", function () {",
													"            var bestSellers = jsonData.sortOptions",
													"                .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"            pm.expect(bestSellers).to.not.be.undefined;",
													"        });",
													"",
													"        pm.test(\"Sort Options to have expected properties\", function () {",
													"            sortOptions.forEach(sortOption => {",
													"                pm.expect(sortOption).to.have.property(\"id\");",
													"                pm.expect(sortOption).to.have.property(\"title\");",
													"                pm.expect(sortOption).to.have.property(\"default\");",
													"            });",
													"        });",
													"",
													"        //Extracting Sorting IDs",
													"        var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"        pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
													"",
													"        const nextPath = jsonData.pagination.next;",
													"        if (nextPath) {",
													"            pm.environment.set(\"tests.var.plpNextPath\", nextPath);",
													"        } else {",
													"            postman.setNextRequest(\"[iOS] - Category PLP - Dynamically sorted\");",
													"        }",
													"    } "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&slot-content-id=plp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "slot-content-id",
													"value": "plp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PLP - Products - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"// TODO raise a bug",
													"//pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"  //  pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/{{tests.var.plpNextPath}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"{{tests.var.plpNextPath}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Category PLP - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var numberOfItems = jsonData.pagination.numberOfItems;",
													"var listingSize = jsonData.listings.length;",
													"",
													"pm.test(\"Number of items matches after sorting\", function () {",
													"    pm.expect(pm.environment.get(\"tests.var.productListPagination\")).to.eql(numberOfItems);",
													"});",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Assert filters is not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(0);",
													"});",
													"",
													"pm.test(\"PLP is not empty\", function () {",
													"    pm.expect(numberOfItems).has.to.be.above(1);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check each product has at least 1 image\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        product.variantGroups.forEach(variant => {",
													"            pm.expect(variant.images.length).to.be.at.least(1);",
													"        })",
													"    });",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"if (listingSize > 0 ) {",
													"    pm.test(\"Assert all products have a valid price\", function () {",
													"        jsonData.listings.forEach(product => {",
													"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
													"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
													"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
													"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
													"",
													"            if (product.priceRange.was) {",
													"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
													"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
													"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
													"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
													"            } ",
													"        });",
													"",
													"       pm.test(\"Was price to equal or be greater than Now price\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                if (product.priceRange.was) {",
													"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
													"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
													"                }",
													"            })",
													"            ",
													"        });",
													"        ",
													"    })",
													"}",
													"",
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"if (sortingOptionsIds && sortingOptionsIds.length > 0){",
													"    postman.setNextRequest(\"[iOS] - Category PLP - Dynamically sorted\");",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Category PLP filter by maximum and minimum price\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&sort={{tests.var.sortOptionId}}&slot-content-id=plp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.sortOptionId}}"
												},
												{
													"key": "slot-content-id",
													"value": "plp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Category PLP filter by maximum and minimum price",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Filters are not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Best Sellers is set as default Sort\", function () {",
													"    var bestSellers = jsonData.sortOptions",
													"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"    pm.expect(bestSellers).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&maxPrice=100&minPrice=1",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "maxPrice",
													"value": "100"
												},
												{
													"key": "minPrice",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Details",
							"item": [
								{
									"name": "Special Product Details",
									"item": [
										{
											"name": "[iOS] - PDP - Bundles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var bundlesProductsIdsVar = pm.environment.get(\"tests.bundlesProductIds\");",
															"var bundlesProductsIds = bundlesProductsIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (bundlesProductsIds.length - 1));",
															"var bundlesProductId = bundlesProductsIds[random];",
															"pm.environment.set(\"tests.var.bundlesProductId\", bundlesProductId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.bundlesProductId'));",
															"    });",
															"",
															"    pm.test(\"'isSetProduct' flag present and set to 'true' at prouduct level\", function () {",
															"        pm.expect(jsonData[0].customData.isSetProduct).to.be.true;",
															"    });",
															"",
															"    var bundleItemsLength = jsonData[0].customData.productsInSet.length;",
															"",
															"    pm.test(\"'productsInSet' to have at least 1 item as part of the bundle\", function () {",
															"        pm.expect(bundleItemsLength).to.be.greaterThan(0);",
															"    });",
															"",
															"    var listOfProductsForMultipleAddToCart = [];",
															"    var inStockVariantsIds = []",
															"",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.bundlesProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.bundlesProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - PDP - Multiple forms",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.multipleFormsProductId'));",
															"    });",
															"",
															"    pm.test(\"'Shade' form is present\", function () {",
															"        var shade = jsonData[0].forms.find(form => form.name === \"shade\");",
															"        pm.expect(shade).to.not.eql(undefined);",
															"    });",
															"",
															"    pm.test(\"'Undertone' form is present\", function () {",
															"        var undertone = jsonData[0].forms.find(form => form.name === \"undertone\");",
															"        pm.expect(undertone).to.not.eql(undefined);",
															"    });",
															"",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var multipleFormsProductIdsVar = pm.environment.get(\"tests.multipleFormsProductIds\");",
															"var multipleFormsProductsIds = multipleFormsProductIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (multipleFormsProductsIds.length - 1));",
															"var multipleFormsProductId = multipleFormsProductsIds[random];",
															"pm.environment.set(\"tests.var.multipleFormsProductId\", multipleFormsProductId);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.multipleFormsProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.multipleFormsProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Product & Variant ID extractor",
									"item": [
										{
											"name": "[iOS] - Get Data from variant ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Script that takes a ELF search page and extracts Product URLs and then from those extract the variant ID to resolve in POQ Backend (product is extracted randomly to have more coverage)",
															"",
															"const searchUrl = pm.environment.get(\"tests.websiteSearchUrl\");",
															"const regexForHtml = /(\\d+)\\.html/g;",
															"",
															"// Function to extract hrefs from HTML",
															"function extractHrefs(html) {",
															"    const hrefs = [];",
															"    const regex = /href=\"([^\"]*)\"/g;",
															"    let match;",
															"    while (match = regex.exec(html)) {",
															"        hrefs.push(match[1]);",
															"    }",
															"    return hrefs;",
															"}",
															"",
															"// Make a request to fetch the HTML content of the webpage",
															"function sendRequest() {",
															"    pm.sendRequest(searchUrl, (err, response) => {",
															"        if (err) {",
															"            console.error('Error fetching the HTML:', err);",
															"            return;",
															"        }",
															"        const html = response.text();",
															"        const hrefs = extractHrefs(html);",
															"        var filterProductsLinks = hrefs.filter(link => link.match(regexForHtml))",
															"        var randomNumber = Math.floor(Math.random() * (filterProductsLinks.length));",
															"        var URL = filterProductsLinks[randomNumber];",
															"",
															"        // Extract ID from URL",
															"        const regex = /\\d+/g;",
															"        const ID = URL.match(regex);",
															"",
															"        pm.environment.set(\"tests.var.idFromUrl\", ID);",
															"    });",
															"}",
															"",
															"sendRequest();"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is extracted\", function () {",
															"    pm.expect(jsonData.productId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"    pm.environment.set(\"tests.extactedProductIdFromUrl\", jsonData.productId);",
															"});",
															"",
															"pm.test(\"Variant Id is extracted\", function () {",
															"    pm.expect(jsonData.variantId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products/resolve?id={{tests.var.idFromUrl}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products",
														"resolve"
													],
													"query": [
														{
															"key": "id",
															"value": "{{tests.var.idFromUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - PDP - with extracted ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is correct\", function () {",
															"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.extactedProductIdFromUrl'));",
															"});",
															"",
															"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.null;",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.extactedProductIdFromUrl}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.extactedProductIdFromUrl}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[iOS] - PDP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData[0].details.name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"How to use is present\", function () {",
													"    var howToUserLink = jsonData[0].meta.links.find(link => link.title === \"How to use\");",
													"    pm.expect(howToUserLink).to.not.eql(undefined);",
													"});",
													"",
													"var reviewsCount = jsonData[0].review.count;",
													"",
													"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(null);",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(undefined);",
													"});",
													"",
													"var vtoIds = []",
													"",
													"const variantids = Object.entries(jsonData[0]['variants']).reduce((acc, [key, value]) => {",
													"    const currency = pm.environment.get(\"currency-code\");",
													"    if (value.stock.available === true && value.stock.quantity > 2 ) {",
													"        pm.environment.set(\"tests.var.barcode\", value.meta.barcode);",
													"        pm.environment.set(\"tests.var.variantId\", value.id);",
													"        pm.environment.set(\"tests.var.productName\", value.name);",
													"    } else {",
													"        postman.setNextRequest(\"[iOS] - Search by keyword\");",
													"    }",
													"",
													"    if (reviewsCount > 0 ) {",
													"        pm.environment.set(\"tests.var.productIdWithReviews\", jsonData[0].id);",
													"        pm.environment.set(\"tests.var.variantIdWithReviews\", jsonData[0].meta.defaultVariantId);",
													"        pm.environment.set(\"tests.var.listingIdWithReviews\", value.listingId);",
													"        pm.environment.set(\"tests.var.numberOfReviewsFromPdp\", reviewsCount);",
													"    }",
													"   ",
													"    pm.test(`Variant images exist for variant Id ${value.id}`, function () {",
													"        pm.expect(value.images.default.length).to.not.eql(0);",
													"    });",
													"",
													"    pm.test(`'Add to bag CTA' is not null (at variant level) for variant Id ${value.id}`, function () {",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(null);",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(undefined);",
													"    });",
													"",
													"    // Extract VTO id if exists",
													"    if (value.customData.vtoID) {",
													"        vtoIds.push(value.customData.vtoID);",
													"    }",
													"",
													"    pm.test(`Price is correctly formatted for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(typeof value.prices.USD.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"$\")",
													"        } else {",
													"            pm.expect(typeof value.prices.GBP.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"£\")",
													"        }",
													"    });",
													"    ",
													"    //Max qty differs between US and UK ",
													"    pm.test(`Max quantity is correcty set for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(9)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(9)",
													"        } else {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(11)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(11)",
													"        }",
													"    });",
													"  return acc",
													"}, [])",
													"",
													"if (vtoIds.length > 0) {",
													"    var randomIndex = Math.floor(Math.random() * (vtoIds.length));",
													"    pm.environment.set(\"tests.var.vtoId\", vtoIds[randomIndex]);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.productId}}&slot-content-id=pdp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.productId}}"
												},
												{
													"key": "slot-content-id",
													"value": "pdp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PDP - UGC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"UGC container is valid\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\")",
													"});",
													"",
													"pm.test(\"Sort Options are valid\", function () {",
													"    pm.expect(jsonData.sortOptions).to.be.an(\"array\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/usergeneratedcontent?productId={{tests.var.productId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"usergeneratedcontent"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Multiple PDPs ( Recently View)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.recentyViewIds}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.recentyViewIds}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Notify Me",
							"item": [
								{
									"name": "[iOS] - PDP - Notify Me - Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": true,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - PDP - Notify Me - DO NOT Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": false,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Reviews",
							"item": [
								{
									"name": "[iOS] - Product Reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"//Extracting Sorting IDs",
													"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortOptionsIds);",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(parseInt(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\")));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Add to bag - Apple Pay\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Product Reviews - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[iOS] - Add to bag - Apple Pay\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.reviewsSortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.reviewSortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortingOptionsIds);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}&sort={{tests.var.reviewSortOptionId}}&variantId={{tests.var.variantIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.reviewSortOptionId}}"
												},
												{
													"key": "variantId",
													"value": "{{tests.var.variantIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Product Reviews - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}{{tests.var.reviewsNextPath}}",
											"host": [
												"{{tests.url}}{{tests.var.reviewsNextPath}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart",
							"item": [
								{
									"name": "Apple Pay",
									"item": [
										{
											"name": "[iOS] - Add to bag - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct product shown in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
															"});",
															"",
															"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
															"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"",
															"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Apple Pay Start",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check 'authTokn' is not null\", function () {",
															"    pm.expect(jsonData.authToken).to.not.eql(undefined);",
															"    pm.expect(jsonData.authToken).to.not.eql(null);",
															"});",
															"",
															"pm.environment.set(\"tests.var.applePayAuthToken\", jsonData.authToken);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/checkout/applepay/start",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"checkout",
														"applepay",
														"start"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Order Summary - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"pm.test(\"Check that items in the summary have isInStock as true\", function () {",
															"    jsonData.itemsSummary.forEach(item => {",
															"        pm.expect(item.isInStock).to.eql(true);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/express/checkout/orderSummary",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"orderSummary"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Invalid Shipping Address - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 424\", function () {",
															"    pm.response.to.have.status(424);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error message match with expected\", function () {",
															"    pm.expect(jsonData.message).to.eql(\"Invalid shipping address\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.invalidCountry}}\",\n\t\"state\": \"{{$randomStreetAddress}}\",\n\t\"city\": \"{{$randomCity}}\",\n\t\"postCode\": \"{{$randomBankAccount}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Shipping Address - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodsIds = jsonData.shippingMethods.map(method => method.id);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodsIds);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.country}}\",\n\t\"state\": \"{{tests.address.state}}\",\n\t\"city\": \"{{tests.address.city}}\",\n\t\"postCode\": \"{{tests.address.postCode}}\",\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Set Shipping method - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"if (shippingMethodIds && shippingMethodIds.length > 0){",
															"    postman.setNextRequest(\"[iOS] - Set Shipping method - Apple Pay\");",
															"} else {",
															"    postman.setNextRequest(\"[iOS] - Delete Cart - Apple Pay\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"var shippingMethodId = shippingMethodIds.shift();",
															"pm.environment.set(\"tests.var.expressShippingMethodId\", shippingMethodId);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{tests.var.expressShippingMethodId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/method",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"method"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Delete Cart - Apple Pay",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Add to Cart - Multiple Items",
									"item": [
										{
											"name": "[iOS] - Add to bag - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.addToCartMultipleBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items/multiple",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items",
														"multiple"
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var totalCartQuantity = 0;",
															"",
															"var productsToDelete = [];",
															"",
															"const currencySymbol = pm.environment.get(\"tests.currencySymbol\");",
															"const currency = pm.environment.get(\"currency-code\");",
															"",
															"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
															"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
															"});",
															"",
															"if (jsonData.total.now > 35) {",
															"    var formattedGiftsPromotionName = `CHOOSE 2 FREE GIFTS WITH ORDERS ${currencySymbol}35+, GET A 3rd ADDED ${currencySymbol}50+!`",
															"    const giftsPromotionObject = jsonData.customData.promotionalProducts[0].LinkedPromotion;",
															"    const bonusProducts = jsonData.customData.promotionalProducts[0].bonus_products;",
															"",
															"    pm.test(`Check Gift section is enabled for cart total ${currencySymbol}35+`, function () {",
															"        pm.expect(giftsPromotionObject).to.not.be.undefined;",
															"    });",
															"",
															"    pm.test(`Promotion name to equal with expected ${formattedGiftsPromotionName}`, function () {",
															"        pm.expect(giftsPromotionObject.name).to.eql(formattedGiftsPromotionName);",
															"    });",
															"",
															"    pm.test(`Promotion currency to equal with expected currency : ${currency}`, function () {",
															"        pm.expect(giftsPromotionObject.currency).to.eql(currency);",
															"    });",
															"",
															"    pm.test(`Bonus products exists`, function () {",
															"        pm.expect(bonusProducts).to.be.an(\"array\").and.have.length.greaterThan(0);",
															"    });",
															"",
															"    pm.test(`Bonus products to have correct properties`, function () {",
															"        bonusProducts.forEach(product => {",
															"            pm.expect(product).to.have.property(\"link\");",
															"            pm.expect(product).to.have.property(\"product_id\");",
															"            pm.expect(product).to.have.property(\"product_name\");",
															"            pm.expect(product).to.have.property(\"title\");",
															"        })",
															"    });",
															"",
															"}",
															"",
															"jsonData.cartItems.forEach(cartItem => {",
															"    totalCartQuantity += cartItem.quantity;",
															"",
															"    //collect product info to delete",
															"    productsToDelete.push(",
															"        {",
															"            \"cartItemId\": cartItem.id,",
															"            \"quantity\": 0,",
															"            \"variantId\": cartItem.variantId,",
															"            \"deleted\": true,",
															"            \"productId\": cartItem.productId",
															"        }",
															"    );",
															"});",
															"",
															"",
															"pm.test(\"Check expect numer of items is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(pm.environment.get(\"tests.var.numerOfProductsAsCollection\"));",
															"});",
															"",
															"pm.test(\"Express Checkout config is not null \", function () {",
															"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.not.be.null;",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"// Build Delete all cart object",
															"var deleteBody = ",
															"{",
															"    \"items\": productsToDelete.map(product => product)",
															"}",
															"",
															"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
															"    jsonData.cartItems.forEach(itemInCart => {",
															"        pm.expect(itemInCart.isInStock).to.be.true;",
															"    });",
															"});",
															"",
															"pm.environment.set(\"tests.var.mutipleProductsToDelete\", JSON.stringify(deleteBody, null, 4));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Delete Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.mutipleProductsToDelete}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[iOS] - Get Cart - Empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (!pm.environment.get(\"tests.var.addToCartMultipleBody\")) {",
													"    postman.setNextRequest(\"[iOS] - Add to bag\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[iOS] - Add to bag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
													"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Update Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 2,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": false,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add valid voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"// the cart can be always switched from home to c&c",
													"//pm.test(\"Cart is only Home Delivery \", function () {",
													"//    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"//    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"//});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"// Promotion ",
													"pm.test(\"Promotion code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.promotions.find(promotion => promotion.name.includes(\"EagleEye\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Voucher code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.vouchers.find(voucher => voucher.code === pm.environment.get(\"tests.var.voucherId\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"    const indexOfPromo = jsonData.vouchers.indexOf(eagleEyePromo);",
													"    pm.expect(jsonData.vouchers[indexOfPromo].status).to.eql(\"Applied\");",
													"    pm.environment.set(\"tests.var.appliedVoucherId\", jsonData.vouchers[indexOfPromo].id);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Cannot add seme voucher twice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Reward code '${pm.environment.get(\"tests.var.voucherId\")}' is invalid.`)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Checkout Start with applied voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Remove voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Cart is only Home Delivery \", function () {",
													"    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"",
													"",
													"pm.test(\"Vouchers are NULL\", function () {",
													"    pm.expect(jsonData.vouchers).to.eql(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedVoucherId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedVoucherId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add to INVALID voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Coupon code '${pm.environment.get(\"tests.random.voucher\")}' is invalid.`)",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomString = pm.variables.replaceIn(\"{{$randomUserName}}\");",
													"",
													"",
													"pm.environment.set(\"tests.random.voucher\", randomString);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.random.voucher}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Checkout Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.order.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.order.items.find(product => product.productId == pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    console.log(jsonData.url);",
													"    console.log(pm.environment.get(\"tests.checkoutUrl\"));",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Cart - Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart?slot-content-id=cart",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "cart"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Invalid Add to bag due to max quantity exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Correct message is recieved\", function () {",
													"    var errorMessage = `Item quantity cannot exceed ${pm.environment.get(\"tests.maxQty\")}`",
													"    pm.expect(jsonData.message)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var maxQty = parseInt(pm.environment.get(\"tests.maxQty\")) + 1;",
													"pm.variables.set(\"tests.var.exceedingQty\", maxQty)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": {{tests.var.exceedingQty}},\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"customData\": {\n        \"isDownload\": false,\n        \"isSubscriptionProduct\": false,\n        \"isDigital\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Stores",
							"item": [
								{
									"name": "[iOS] - Get Stores by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lat={{tests.latitude}}&lng={{tests.longitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{tests.latitude}}"
												},
												{
													"key": "lng",
													"value": "{{tests.longitude}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Stores by ZipCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?q={{tests.address.postCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "q",
													"value": "{{tests.address.postCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Store detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct store detail is displayed\", function () {",
													"    pm.expect(jsonData.name).to.eql(pm.environment.get('tests.var.storeName'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores/{{tests.var.externalStoreId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores",
												"{{tests.var.externalStoreId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - No Stores random by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check stores are empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lng=1&lat={{$randomLatitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lng",
													"value": "1"
												},
												{
													"key": "lat",
													"value": "{{$randomLatitude}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Wishlist",
							"item": [
								{
									"name": "[iOS] - Logged - Clear Wishlist Before Adding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Logged - Get Wishlist - Check Wishlist to be empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check items array is empty\", function () {",
													"    pm.expect(jsonData.items).to.be.an('array').that.is.empty",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Logged - Add to Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"setTimeout(() => {}, 5000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"listingId\": \"{{tests.var.listingId}}\",\n\t\"productId\": \"{{tests.var.productId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Logged - Get Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product Id is displayed\", function () {",
													"    pm.expect(jsonData.items[0].listingId).to.eql(pm.variables.get('tests.var.listingId'));",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS]  - Logged - Delete Single Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items/{{tests.var.listingId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items",
												"{{tests.var.listingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Logged - Add to Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"setTimeout(() => {}, 5000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"listingId\": \"{{tests.var.listingId}}\",\n\t\"productId\": \"{{tests.var.productId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS]  - Logged - Clear Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Barcode Scanner",
							"item": [
								{
									"name": "[iOS] - Successful barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData.listings[0].name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData.listings[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{tests.var.barcode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{tests.var.barcode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Invalid barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"No products found\", function () {",
													"    pm.expect(jsonData.listings.length).to.eql(0);",
													"});",
													"",
													"if (pm.environment.get(\"environment\") == \"dev\" || pm.environment.get(\"environment\") == \"staging\") {",
													"    postman.setNextRequest(\"[iOS] - Get Receipts History\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{$randomBankAccount}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{$randomBankAccount}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart - Apply/Remove Beauty Squad Reward Journey",
							"item": [
								{
									"name": "[iOS] - Splash request - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const poq_salt = jsonData.config.find(config => config.key === \"fragmentSuffix\").value;",
													"pm.environment.set(\"poq-salt\", poq_salt);",
													"",
													"pm.test(\"Localization array is not empty\", function () {",
													"    pm.expect(jsonData.localization.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Theme array is not empty\", function () {",
													"    pm.expect(jsonData.theme.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Config array is not empty\", function () {",
													"    pm.expect(jsonData.config.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.ios.versionCode\")}`, function () {",
													"    var forceUpdateConfigValue = jsonData.config.find(config => config.key === \"forceUpdate\").value;",
													"    pm.expect(forceUpdateConfigValue).to.eql('false');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random poq-user-id on the first running request",
													"",
													"var uuid = require('uuid');",
													"var poqUserId = uuid.v4();",
													"pm.environment.set(\"tests.ios.poq-user-id\", poqUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/splash/ios/{{poq-app-id}}/3?poqUserId={{tests.ios.poq-user-id}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"splash",
												"ios",
												"{{poq-app-id}}",
												"3"
											],
											"query": [
												{
													"key": "poqUserId",
													"value": "{{tests.ios.poq-user-id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Log In User - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
													"const secretKey = pm.environment.get(\"secretKey\");",
													"const poq_salt = pm.environment.get('poq-salt');",
													"",
													"function buildRequestBody(){",
													"    const body = {",
													"        isMasterCard: false,",
													"        username: pm.environment.get('tests.existingUserEmail'),",
													"        password: pm.environment.get('tests.existingUserPassword')",
													"    }",
													"    return JSON.stringify(body);",
													"}",
													"",
													"const theIterations = 1000;",
													"const theOutputKeyLength = 16;",
													"",
													"function getSecretKey(key, salt, iterations) {",
													"    const hasher = CryptoJS.algo.SHA256.create();",
													"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
													"        keySize: 256 / 32,",
													"        iterations: iterations,",
													"        hasher: hasher",
													"    });",
													"    return derivedKey;",
													"}",
													"",
													"function getBytes(input) {",
													"    return CryptoJS.enc.Utf8.parse(input);",
													"}",
													"",
													"function signRequest() {",
													"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
													"    const saltBytes = getBytes(poq_salt);",
													"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
													"    const body = buildRequestBody();",
													"    const input = body + poqUserId;",
													"    hashInputBytes = getBytes(input);",
													"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
													"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
													"",
													"    pm.request.headers.add({",
													"        key: 'poq-auth',",
													"        value: signedEncoded",
													"    });",
													"}",
													"",
													"signRequest();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"tests.var.loginAccessToken\", jsonData.accessToken);",
													"pm.environment.set(\"tests.var.loginRefreshToken\", jsonData.refreshToken);",
													"",
													"",
													"pm.test(\"Check if access token is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"accessToken\");",
													"    pm.expect(jsonData.accessToken).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check if refresh token is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"refreshToken\");",
													"    pm.expect(jsonData.refreshToken).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check if externalUserId is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"externalUserId\");",
													"    pm.expect(jsonData.externalUserId).to.not.eq(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.externalUserId\", jsonData.externalUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept-encoding": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.existingUserEmail}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"account",
												"login",
												"{{poq-app-id}}",
												"{{tests.ios.poq-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add to bag - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Cart - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is a 2$/£ Reward on Beauty Squad banner\", function () {",
													"    const unusedRewards = jsonData.customData.unusedRewards;",
													"    var reward = unusedRewards.find(reward => reward.RewardTitle == \"$2 off your order\");",
													"    pm.expect(reward).to.not.be.undefined;",
													"    pm.environment.set(\"tests.var.rewardCode\", reward.Code);",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Add valid voucher - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is a 2$/£ Reward applied in cart\", function () {",
													"    const appliedPromotions = jsonData.customData.appliedPromotions;",
													"    var reward = appliedPromotions.find(reward => reward.PromotionTitle == \"$2 off order\");",
													"    pm.expect(reward).to.not.be.undefined;",
													"    pm.expect(reward.status_code).to.eql(\"applied\");",
													"    pm.expect(reward.valid).to.be.true;",
													"    pm.environment.set(\"tests.var.appliedPromotionId\", reward.coupon_item_id);",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.rewardCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.rewardCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Checkout Start - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Remove voucher - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is NO a 2$/£ Reward applied in cart\", function () {",
													"    const appliedPromotions = jsonData.customData.appliedPromotions;",
													"    var reward = appliedPromotions.find(reward => reward.PromotionTitle == \"$2 off order\");",
													"    pm.expect(reward).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedPromotionId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedPromotionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Delete Cart - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Receipt Scan",
							"item": [
								{
									"name": "[iOS] - Get Receipts History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Submitted receipts list exists\", function () {",
													"    pm.expect(jsonData.submittedReceipts).to.be.an('array')",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/history",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Submit Receipt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check message of upload confirmation\", function () {",
													"    pm.expect(jsonData.message).to.eql(\"Receipt successfully submitted for processing.\");",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"file_id\": \"{{tests.receiptFileId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/submit",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"submit"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Award Receipt Scan activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if awarded\", function () {",
													"    pm.expect(jsonData.awarded).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{tests.existingUserEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{tests.var.encryptedPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"activity_id\": {{tests.activities.receiptScan}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/loyalty/awardactivity",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"loyalty",
												"awardactivity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get Receipts History - With 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Submitted receipts contains 1 record\", function () {",
													"    pm.expect(jsonData.submittedReceipts.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Correct receipit image (file) has been uploaded\", function () {",
													"    jsonData.submittedReceipts.forEach(receipt => {",
													"        pm.expect(receipt.file_id).to.be.eql(pm.environment.get(\"tests.receiptFileId\"))",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/history",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"history"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "MMM - Match My Makeup",
							"item": [
								{
									"name": "[iOS] - Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Token exists\", function () {",
													"    pm.expect(jsonData.token).to.be.a('string');",
													"});",
													"",
													"pm.test(\"clientId exists\", function () {",
													"    pm.expect(jsonData.clientId).to.be.a('string');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/mmm/token",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"mmm",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "VTO - Virtual Try On",
							"item": [
								{
									"name": "[iOS] - Award VTO activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if awarded\", function () {",
													"    pm.expect(jsonData.awarded).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{tests.existingUserEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{tests.var.encryptedPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"activity_id\": {{tests.activities.vto}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/loyalty/awardactivity",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"loyalty",
												"awardactivity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[iOS] - Get VTO Product Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    jsonData.forEach(product => {",
													"        pm.expect(product.guid).to.eql(pm.environment.get(\"tests.var.vtoId\"));",
													"    })",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products/vto?ids={{tests.var.vtoId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"vto"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.vtoId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Headers userd only by iOS mobile platform ",
							"",
							"pm.request.headers.add({",
							"  key: 'platform',",
							"  value: 'iphone'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'appuseragent',",
							"  value: 'Poq-Native-iOS-App'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'poq-user-id',",
							"  value: '{{tests.ios.poq-user-id}}'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'version-code',",
							"  value: '{{tests.ios.version-code}}'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'user-agent',",
							"  value: '{{tests.ios.user-agent}}'",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Android",
			"item": [
				{
					"name": "Guest User Journey",
					"item": [
						{
							"name": "Settings & Launch",
							"item": [
								{
									"name": "[Android] - Setting request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Settings array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.android.version-code\")}`, function () {",
													"    var forceUpdateConfigValue = jsonData.find(config => config.key === \"forceUpdate_Android\").value;",
													"    pm.expect(forceUpdateConfigValue).to.eql('false');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random poq-user-id on the first running request",
													"",
													"var uuid = require('uuid');",
													"var poqUserId = uuid.v4();",
													"pm.environment.set(\"tests.android.poq-user-id\", poqUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/settings/config/{{poq-app-id}}/0",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"settings",
												"config",
												"{{poq-app-id}}",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Launch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Force update is not applied on current app version\", function () {",
													"    pm.expect(jsonData.forceUpdate).to.be.null;",
													"});",
													"",
													"pm.test(\"Validate the onboarding object\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the onboarding ID is a non-empty string\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.all.keys('forceUpdate', 'maintenance', 'onboarding', 'customData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/launch?appVersion={{tests.android.appVersion}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"launch"
											],
											"query": [
												{
													"key": "appVersion",
													"value": "{{tests.android.appVersion}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Banners",
							"item": [
								{
									"name": "[Android] - Banners - No labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Online",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=online",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "online"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Cosmetics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=cosmetics",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "cosmetics"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Skin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=skin",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "skin"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "App Stories",
							"item": [
								{
									"name": "[Android] - App Stories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Stories array is not empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.stories.length).to.not.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/appstories/apps/{{poq-app-id}}/home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"appstories",
												"apps",
												"{{poq-app-id}}",
												"home"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Catalogue",
							"item": [
								{
									"name": "Search by Keyword Sort and Filters",
									"item": [
										{
											"name": "[Android] - Predictive Search",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check categories is not empty\", function () {",
															"    pm.expect(jsonData.categories.length).to.be.above(0);",
															"});",
															"",
															"pm.test(\"Check category title property exists\", function () {",
															"   pm.expect(jsonData.categories[0]).to.have.property('title');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate predictive results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.predictiveSearchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.predictiveSearchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search/predictive?keyword={{tests.var.predictiveSearchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search",
														"predictive"
													],
													"query": [
														{
															"key": "keyword",
															"value": "{{tests.var.predictiveSearchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Search by keyword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"//Extracting Sorting IDs",
															"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}",
															"",
															"// Store product ID which are stock available to true",
															"var productIds = [];",
															"var listingIds = [];",
															"var productNames = [];",
															"var variationIds = [];",
															"",
															"var productList = jsonData.listings;",
															"",
															"if (productList.length === 0) {",
															"    postman.setNextRequest(\"[iOS] - Search by keyword\");",
															"}",
															"",
															"for (var i=0; i < productList.length; i++)",
															"{",
															"    var variantGroups = productList[i].variantGroups;",
															"    for (var j=0; j < variantGroups.length; j++)",
															"    {",
															"        if ((variantGroups[j].stock && variantGroups[j].stock.available === true)) {",
															"            productIds.push(productList[i].productId)",
															"            listingIds.push(productList[i].id)",
															"            if (productList[i].variantGroups[j].formVariationIds) {",
															"                variationIds.push(productList[i].variantGroups[j].formVariationIds[0])",
															"            } else {",
															"                var listingId = productList[i].id.split(\"-poqListingId-\");",
															"                variationIds.push(listingId[1]);",
															"            }",
															"            productNames.push(productList[i].name)",
															"        }",
															"    }",
															"}",
															"",
															"",
															"// Pick a random number within productIds array length to extact a random product at run time ",
															"var randomNumber = Math.floor(Math.random() * (productIds.length));",
															"",
															"pm.environment.set(\"tests.var.productId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.listingId\", listingIds[randomNumber]);",
															"pm.environment.set(\"tests.var.productName\", productNames[randomNumber]);",
															"pm.environment.set(\"tests.var.variantId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.variantGroupId\", variationIds[randomNumber]);",
															"",
															"// Fill a list of ids to be used to simulate \"Recently View\" carrousel",
															"pm.environment.set(\"tests.var.recentyViewIds\", Object.values(productIds));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate PLP results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.searchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.searchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Search PLP - Dynamically sorted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
															"",
															"var sortingOptionId = sortingOptionsIds.shift();",
															"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&sort={{tests.var.sortOptionId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "sort",
															"value": "{{tests.var.sortOptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Search PLP filter by maximum and minimum price Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Listings is not empty\", function () {",
															"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Filters are not empty\", function () {",
															"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&maxPrice=100&minPrice=1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "maxPrice",
															"value": "100"
														},
														{
															"key": "minPrice",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[Android] - Shop",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"const allCategories = [];",
													"",
													"pm.test(\"Verify that the 'categories' array is present and not empty\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData.categories).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Catgories array should not be empty\");",
													"});",
													"",
													"const getAllCategoriesObjects = array => array.flatMap(category => {",
													"    if (Array.isArray(category.categories) && category.categories.length > 0) {",
													"       return getAllCategoriesObjects(category.categories)",
													"    } else {",
													"       allCategories.push(category);",
													"   }",
													"})",
													"",
													"pm.test(\"Verify that the 'categories' have all properties correctly evaluated\", function () {",
													"    getAllCategoriesObjects(jsonData.categories);",
													"    allCategories.forEach(category => {",
													"        pm.expect(category).to.exist.and.to.be.an('object')",
													"        pm.expect(category.id).to.not.eql(null);",
													"        pm.expect(category.id).to.have.lengthOf.at.least(1, \"'id' should not be empty\");",
													"        pm.expect(category.name).to.not.eql(null);",
													"        pm.expect(category.name).to.have.lengthOf.at.least(1, \"'name' should not be empty\");",
													"    })",
													"});",
													"",
													"// Get all sub categories and randomised",
													"const getIds = arr => (",
													"    arr.flatMap(                // iterate using \".flatMap()\" to avoid nesting",
													"        ({ id, categories }) => {   // de-structure to directly access \"id\" & \"categories\"",
													"            if (                    // if \"categories\" is not empty, recurse to next level",
													"                Array.isArray(categories) &&",
													"                categories.length > 0",
													"            ) {",
													"                return getIds(categories);",
													"            } else {                // if it is empty, return the id",
													"                return id;",
													"            }",
													"        }",
													"    )",
													");",
													"",
													"var subCategories = getIds(jsonData.categories);",
													"const random = Math.floor(Math.random() * subCategories.length);",
													"",
													"pm.environment.set(\"tests.var.subCategoryId\", subCategories[random]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/shop?slot-content-id=shop",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"shop"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "shop"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PLP - Products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var listingSize = jsonData.listings.length;",
													"",
													"// Check if PLP has item greater then 3 and retry for maximum 10 times ",
													"// If it doesn't then it executes '[iOS] - Shop' request which in turn is the one selecting a random category",
													"",
													"const maxNumberOfTries = 10;",
													"if (!pm.environment.get(\"tests.var.tries\")) {  ",
													"    pm.environment.set(\"tests.var.tries\", 1);",
													"}",
													"    ",
													"if ((jsonData.pagination.numberOfItems < 3) && (pm.environment.get(\"tests.var.tries\") < maxNumberOfTries)) {",
													"        const tries = parseInt(pm.environment.get(\"tests.var.tries\"), 10);",
													"        pm.environment.set(\"tests.var.tries\", tries + 1);",
													"        postman.setNextRequest(\"[Android] - Shop\");",
													"    } else {",
													"        pm.environment.unset(\"tests.var.tries\");",
													"",
													"        pm.test(\"Assert listings is not empty\", function () {",
													"            pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"        });",
													"",
													"        pm.test(\"Assert filters is not empty\", function () {",
													"            pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"        });",
													"",
													"        var numberOfItems = jsonData.pagination.numberOfItems;",
													"",
													"        pm.test(\"Check PLP is not empty\", function () {",
													"            pm.expect(listingSize).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Check each product has at least 1 image\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                product.variantGroups.forEach(variant => {",
													"                    pm.expect(variant.images.length).to.be.at.least(1);",
													"                })",
													"            });",
													"        });",
													"",
													"        pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
													"",
													"        const sortOptions = jsonData.sortOptions;",
													"",
													"        pm.test(\"Sort Options are not empty\", function () {",
													"            pm.expect(jsonData.sortOptions.length).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Best Sellers is set as default Sort\", function () {",
													"            var bestSellers = jsonData.sortOptions",
													"                .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"            pm.expect(bestSellers).to.not.be.undefined;",
													"        });",
													"",
													"        pm.test(\"Sort Options to have expected properties\", function () {",
													"            sortOptions.forEach(sortOption => {",
													"                pm.expect(sortOption).to.have.property(\"id\");",
													"                pm.expect(sortOption).to.have.property(\"title\");",
													"                pm.expect(sortOption).to.have.property(\"default\");",
													"            });",
													"        });",
													"",
													"        //Extracting Sorting IDs",
													"        var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"        pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
													"",
													"        const nextPath = jsonData.pagination.next;",
													"        if (nextPath) {",
													"            pm.environment.set(\"tests.var.plpNextPath\", nextPath);",
													"        } else {",
													"            postman.setNextRequest(\"[Android] - Category PLP - Dynamically sorted\");",
													"        }",
													"    } "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PLP - Products - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"// TODO raise a bug",
													"//pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"  //  pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"//});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/{{tests.var.plpNextPath}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"{{tests.var.plpNextPath}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Category PLP - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var numberOfItems = jsonData.pagination.numberOfItems;",
													"var listingSize = jsonData.listings.length;",
													"",
													"pm.test(\"Number of items matches after sorting\", function () {",
													"    pm.expect(pm.environment.get(\"tests.var.productListPagination\")).to.eql(numberOfItems);",
													"});",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Assert filters is not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(0);",
													"});",
													"",
													"pm.test(\"PLP is not empty\", function () {",
													"    pm.expect(numberOfItems).has.to.be.above(1);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check each product has at least 1 image\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        product.variantGroups.forEach(variant => {",
													"            pm.expect(variant.images.length).to.be.at.least(1);",
													"        })",
													"    });",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"if (listingSize > 0 ) {",
													"    pm.test(\"Assert all products have a valid price\", function () {",
													"        jsonData.listings.forEach(product => {",
													"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
													"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
													"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
													"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
													"",
													"            if (product.priceRange.was) {",
													"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
													"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
													"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
													"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
													"            } ",
													"        });",
													"",
													"       pm.test(\"Was price to equal or be greater than Now price\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                if (product.priceRange.was) {",
													"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
													"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
													"                }",
													"            })",
													"            ",
													"        });",
													"        ",
													"    })",
													"}",
													"",
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"if (sortingOptionsIds && sortingOptionsIds.length > 0){",
													"    postman.setNextRequest(\"[Android] - Category PLP - Dynamically sorted\");",
													"} else {",
													"    postman.setNextRequest(\"[Android] - Category PLP filter by maximum and minimum price\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&sort={{tests.var.sortOptionId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.sortOptionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Category PLP filter by maximum and minimum price",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Filters are not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Best Sellers is set as default Sort\", function () {",
													"    var bestSellers = jsonData.sortOptions",
													"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"    pm.expect(bestSellers).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&maxPrice=100&minPrice=1",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "maxPrice",
													"value": "100"
												},
												{
													"key": "minPrice",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Details",
							"item": [
								{
									"name": "Special Product Details",
									"item": [
										{
											"name": "[Android] - PDP - Bundles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var bundlesProductsIdsVar = pm.environment.get(\"tests.bundlesProductIds\");",
															"var bundlesProductsIds = bundlesProductsIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (bundlesProductsIds.length - 1));",
															"var bundlesProductId = bundlesProductsIds[random];",
															"pm.environment.set(\"tests.var.bundlesProductId\", bundlesProductId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.bundlesProductId'));",
															"    });",
															"",
															"    pm.test(\"'isSetProduct' flag present and set to 'true' at prouduct level\", function () {",
															"        pm.expect(jsonData[0].customData.isSetProduct).to.be.true;",
															"    });",
															"",
															"    var bundleItemsLength = jsonData[0].customData.productsInSet.length;",
															"",
															"    pm.test(\"'productsInSet' to have at least 1 item as part of the bundle\", function () {",
															"        pm.expect(bundleItemsLength).to.be.greaterThan(0);",
															"    });",
															"",
															"    var listOfProductsForMultipleAddToCart = [];",
															"    var inStockVariantsIds = []",
															"",
															"} else {",
															"    postman.setNextRequest(\"[Android] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.bundlesProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.bundlesProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - PDP - Multiple forms",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.multipleFormsProductId'));",
															"    });",
															"",
															"    pm.test(\"'Shade' form is present\", function () {",
															"        var shade = jsonData[0].forms.find(form => form.name === \"shade\");",
															"        pm.expect(shade).to.not.eql(undefined);",
															"    });",
															"",
															"    pm.test(\"'Undertone' form is present\", function () {",
															"        var undertone = jsonData[0].forms.find(form => form.name === \"undertone\");",
															"        pm.expect(undertone).to.not.eql(undefined);",
															"    });",
															"",
															"} else {",
															"    postman.setNextRequest(\"[Android] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var multipleFormsProductIdsVar = pm.environment.get(\"tests.multipleFormsProductIds\");",
															"var multipleFormsProductsIds = multipleFormsProductIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (multipleFormsProductsIds.length - 1));",
															"var multipleFormsProductId = multipleFormsProductsIds[random];",
															"pm.environment.set(\"tests.var.multipleFormsProductId\", multipleFormsProductId);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.multipleFormsProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.multipleFormsProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Product & Variant ID extractor",
									"item": [
										{
											"name": "[Android] - Get Data from variant ID - Guest",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Script that takes a ELF search page and extracts Product URLs and then from those extract the variant ID to resolve in POQ Backend (product is extracted randomly to have more coverage)",
															"",
															"const searchUrl = pm.environment.get(\"tests.websiteSearchUrl\");",
															"const regexForHtml = /(\\d+)\\.html/g;",
															"",
															"// Function to extract hrefs from HTML",
															"function extractHrefs(html) {",
															"    const hrefs = [];",
															"    const regex = /href=\"([^\"]*)\"/g;",
															"    let match;",
															"    while (match = regex.exec(html)) {",
															"        hrefs.push(match[1]);",
															"    }",
															"    return hrefs;",
															"}",
															"",
															"// Make a request to fetch the HTML content of the webpage",
															"function sendRequest() {",
															"    pm.sendRequest(searchUrl, (err, response) => {",
															"        if (err) {",
															"            console.error('Error fetching the HTML:', err);",
															"            return;",
															"        }",
															"        const html = response.text();",
															"        const hrefs = extractHrefs(html);",
															"        var filterProductsLinks = hrefs.filter(link => link.match(regexForHtml))",
															"        var randomNumber = Math.floor(Math.random() * (filterProductsLinks.length));",
															"        var URL = filterProductsLinks[randomNumber];",
															"",
															"        // Extract ID from URL",
															"        const regex = /\\d+/g;",
															"        const ID = URL.match(regex);",
															"",
															"        pm.environment.set(\"tests.var.idFromUrl\", ID);",
															"    });",
															"}",
															"",
															"sendRequest();"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is extracted\", function () {",
															"    pm.expect(jsonData.productId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"    pm.environment.set(\"tests.extactedProductIdFromUrl\", jsonData.productId);",
															"});",
															"",
															"pm.test(\"Variant Id is extracted\", function () {",
															"    pm.expect(jsonData.variantId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products/resolve?id={{tests.var.idFromUrl}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products",
														"resolve"
													],
													"query": [
														{
															"key": "id",
															"value": "{{tests.var.idFromUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - PDP - with extracted ID - Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is correct\", function () {",
															"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.extactedProductIdFromUrl'));",
															"});",
															"",
															"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.null;",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.extactedProductIdFromUrl}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.extactedProductIdFromUrl}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[Android] - PDP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData[0].details.name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"How to use is present\", function () {",
													"    var howToUserLink = jsonData[0].meta.links.find(link => link.title === \"How to use\");",
													"    pm.expect(howToUserLink).to.not.eql(undefined);",
													"});",
													"",
													"var reviewsCount = jsonData[0].review.count;",
													"",
													"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(null);",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(undefined);",
													"});",
													"",
													"var vtoIds = []",
													"",
													"const variantids = Object.entries(jsonData[0]['variants']).reduce((acc, [key, value]) => {",
													"    const currency = pm.environment.get(\"currency-code\");",
													"    if (value.stock.available === true && value.stock.quantity > 2 ) {",
													"        pm.environment.set(\"tests.var.barcode\", value.meta.barcode);",
													"        pm.environment.set(\"tests.var.variantId\", value.id);",
													"        pm.environment.set(\"tests.var.productName\", value.name);",
													"    } else {",
													"        postman.setNextRequest(\"[Android] - Search by keyword\");",
													"    }",
													"",
													"    if (reviewsCount > 0 ) {",
													"        pm.environment.set(\"tests.var.productIdWithReviews\", jsonData[0].id);",
													"        pm.environment.set(\"tests.var.variantIdWithReviews\", jsonData[0].meta.defaultVariantId);",
													"        pm.environment.set(\"tests.var.listingIdWithReviews\", value.listingId);",
													"        pm.environment.set(\"tests.var.numberOfReviewsFromPdp\", reviewsCount);",
													"    }",
													"   ",
													"    pm.test(`Variant images exist for variant Id ${value.id}`, function () {",
													"        pm.expect(value.images.default.length).to.not.eql(0);",
													"    });",
													"",
													"    pm.test(`'Add to bag CTA' is not null (at variant level) for variant Id ${value.id}`, function () {",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(null);",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(undefined);",
													"    });",
													"",
													"    // Extract VTO id if exists",
													"    if (value.customData.vtoID) {",
													"        vtoIds.push(value.customData.vtoID);",
													"    }",
													"",
													"    pm.test(`Price is correctly formatted for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(typeof value.prices.USD.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"$\")",
													"        } else {",
													"            pm.expect(typeof value.prices.GBP.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"£\")",
													"        }",
													"    });",
													"    ",
													"    //Max qty differs between US and UK ",
													"    pm.test(`Max quantity is correcty set for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(9)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(9)",
													"        } else {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(11)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(11)",
													"        }",
													"    });",
													"  return acc",
													"}, [])",
													"",
													"if (vtoIds.length > 0) {",
													"    var randomIndex = Math.floor(Math.random() * (vtoIds.length));",
													"    pm.environment.set(\"tests.var.vtoId\", vtoIds[randomIndex]);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.productId}}&slot-content-id=pdp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.productId}}"
												},
												{
													"key": "slot-content-id",
													"value": "pdp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PDP - UGC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"UGC container is valid\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\")",
													"});",
													"",
													"pm.test(\"Sort Options are valid\", function () {",
													"    pm.expect(jsonData.sortOptions).to.be.an(\"array\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/usergeneratedcontent?productId={{tests.var.productId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"usergeneratedcontent"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Multiple PDPs ( Recently View)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.recentyViewIds}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.recentyViewIds}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Notify Me",
							"item": [
								{
									"name": "[Android] - PDP - Notify Me - Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": true,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PDP - Notify Me - DO NOT Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": false,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Product Reviews",
							"item": [
								{
									"name": "[Android] - Product Reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"//Extracting Sorting IDs",
													"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortOptionsIds);",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(parseInt(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\")));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[Android] - Add to bag - Pay Pal\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Product Reviews - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.reviewsSortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.reviewSortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortingOptionsIds);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}&sort={{tests.var.reviewSortOptionId}}&variantId={{tests.var.variantIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.reviewSortOptionId}}"
												},
												{
													"key": "variantId",
													"value": "{{tests.var.variantIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Product Reviews - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}{{tests.var.reviewsNextPath}}",
											"host": [
												"{{tests.url}}{{tests.var.reviewsNextPath}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart",
							"item": [
								{
									"name": "Pay Pal",
									"item": [
										{
											"name": "[Android] - Add to bag - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct product shown in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
															"});",
															"",
															"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"",
															"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Order Summary - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"pm.test(\"Check that items in the summary have isInStock as true\", function () {",
															"    jsonData.itemsSummary.forEach(item => {",
															"        pm.expect(item.isInStock).to.eql(true);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/express/checkout/orderSummary",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"orderSummary"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Invalid Shipping Address - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 424\", function () {",
															"    pm.response.to.have.status(424);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error message match with expected\", function () {",
															"    pm.expect(jsonData.message).to.eql(\"Invalid shipping address\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.invalidCountry}}\",\n\t\"state\": \"{{$randomStreetAddress}}\",\n\t\"city\": \"{{$randomCity}}\",\n\t\"postCode\": \"{{$randomBankAccount}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Shipping Address - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodsIds = jsonData.shippingMethods.map(method => method.id);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodsIds);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.country}}\",\n\t\"state\": \"{{tests.address.state}}\",\n\t\"city\": \"{{tests.address.city}}\",\n\t\"postCode\": \"{{tests.address.postCode}}\",\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Shipping method - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"if (shippingMethodIds && shippingMethodIds.length > 0){",
															"    postman.setNextRequest(\"[Android] - Set Shipping method - Pay Pal\");",
															"} else {",
															"    postman.setNextRequest(\"[Android] - Delete Cart - Pay Pal\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"var shippingMethodId = shippingMethodIds.shift();",
															"pm.environment.set(\"tests.var.expressShippingMethodId\", shippingMethodId);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{tests.var.expressShippingMethodId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/method",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"method"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Delete Cart - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Add to Cart - Multiple Items",
									"item": [
										{
											"name": "[Android] - Add to bag - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.addToCartMultipleBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items/multiple",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items",
														"multiple"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var totalCartQuantity = 0;",
															"",
															"var productsToDelete = [];",
															"",
															"const currencySymbol = pm.environment.get(\"tests.currencySymbol\");",
															"const currency = pm.environment.get(\"currency-code\");",
															"",
															"if (jsonData.total.now > 35) {",
															"    var formattedGiftsPromotionName = `CHOOSE 2 FREE GIFTS WITH ORDERS ${currencySymbol}35+, GET A 3rd ADDED ${currencySymbol}50+!`",
															"    const giftsPromotionObject = jsonData.customData.promotionalProducts[0].LinkedPromotion;",
															"    const bonusProducts = jsonData.customData.promotionalProducts[0].bonus_products;",
															"",
															"    pm.test(`Check Gift section is enabled for cart total ${currencySymbol}35+`, function () {",
															"        pm.expect(giftsPromotionObject).to.not.be.undefined;",
															"    });",
															"",
															"    pm.test(`Promotion name to equal with expected ${formattedGiftsPromotionName}`, function () {",
															"        pm.expect(giftsPromotionObject.name).to.eql(formattedGiftsPromotionName);",
															"    });",
															"",
															"    pm.test(`Promotion currency to equal with expected currency : ${currency}`, function () {",
															"        pm.expect(giftsPromotionObject.currency).to.eql(currency);",
															"    });",
															"",
															"    pm.test(`Bonus products exists`, function () {",
															"        pm.expect(bonusProducts).to.be.an(\"array\").and.have.length.greaterThan(0);",
															"    });",
															"",
															"    pm.test(`Bonus products to have correct properties`, function () {",
															"        bonusProducts.forEach(product => {",
															"            pm.expect(product).to.have.property(\"link\");",
															"            pm.expect(product).to.have.property(\"product_id\");",
															"            pm.expect(product).to.have.property(\"product_name\");",
															"            pm.expect(product).to.have.property(\"title\");",
															"        })",
															"    });",
															"",
															"}",
															"",
															"jsonData.cartItems.forEach(cartItem => {",
															"    totalCartQuantity += cartItem.quantity;",
															"",
															"    //collect product info to delete",
															"    productsToDelete.push(",
															"        {",
															"            \"cartItemId\": cartItem.id,",
															"            \"quantity\": 0,",
															"            \"variantId\": cartItem.variantId,",
															"            \"deleted\": true,",
															"            \"productId\": cartItem.productId",
															"        }",
															"    );",
															"});",
															"",
															"",
															"pm.test(\"Check expect numer of items is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(pm.environment.get(\"tests.var.numerOfProductsAsCollection\"));",
															"});",
															"",
															"pm.test(\"Express Checkout config is not null \", function () {",
															"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.not.be.null;",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"// Build Delete all cart object",
															"var deleteBody = ",
															"{",
															"    \"items\": productsToDelete.map(product => product)",
															"}",
															"",
															"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
															"    jsonData.cartItems.forEach(itemInCart => {",
															"        pm.expect(itemInCart.isInStock).to.be.true;",
															"    });",
															"});",
															"",
															"pm.environment.set(\"tests.var.mutipleProductsToDelete\", JSON.stringify(deleteBody, null, 4));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Delete Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.mutipleProductsToDelete}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (!pm.environment.get(\"tests.var.addToCartMultipleBody\")) {",
													"    postman.setNextRequest(\"[iOS] - Add to bag\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[Android] - Add to bag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Update Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct cartId\", function () {",
													"    pm.expect(jsonData.cartId).to.eql(pm.variables.get('tests.var.initialCartId'));",
													"});",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 2,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": false,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add valid voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"// the cart can be always switched from home to c&c",
													"//pm.test(\"Cart is only Home Delivery \", function () {",
													"//    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"//    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"//});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"// Promotion ",
													"pm.test(\"Promotion code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.promotions.find(promotion => promotion.name.includes(\"EagleEye\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Voucher code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.vouchers.find(voucher => voucher.code === pm.environment.get(\"tests.var.voucherId\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"    const indexOfPromo = jsonData.vouchers.indexOf(eagleEyePromo);",
													"    pm.expect(jsonData.vouchers[indexOfPromo].status).to.eql(\"Applied\");",
													"    pm.environment.set(\"tests.var.appliedVoucherId\", jsonData.vouchers[indexOfPromo].id);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Cannot add same voucher twice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Reward code '${pm.environment.get(\"tests.var.voucherId\")}' is invalid.`)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Checkout Start with applied voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Remove voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Cart is only Home Delivery \", function () {",
													"    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"",
													"",
													"pm.test(\"Vouchers are NULL\", function () {",
													"    pm.expect(jsonData.vouchers).to.eql(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedVoucherId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedVoucherId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add to INVALID voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Coupon code '${pm.environment.get(\"tests.random.voucher\")}' is invalid.`)",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomString = pm.variables.replaceIn(\"{{$randomUserName}}\");",
													"",
													"",
													"pm.environment.set(\"tests.random.voucher\", randomString);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.random.voucher}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Checkout Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.order.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.order.items.find(product => product.productId == pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    console.log(jsonData.url);",
													"    console.log(pm.environment.get(\"tests.checkoutUrl\"));",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Cart - Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart?slot-content-id=cart",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "cart"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Invalid Add to bag due to max quantity exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Correct message is recieved\", function () {",
													"    var errorMessage = `Item quantity cannot exceed ${pm.environment.get(\"tests.maxQty\")}`",
													"    pm.expect(jsonData.message)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var maxQty = parseInt(pm.environment.get(\"tests.maxQty\")) + 1;",
													"pm.variables.set(\"tests.var.exceedingQty\", maxQty)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": {{tests.var.exceedingQty}},\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"customData\": {\n        \"isDownload\": false,\n        \"isSubscriptionProduct\": false,\n        \"isDigital\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Stores",
							"item": [
								{
									"name": "[Android] - Get Stores by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lat={{tests.latitude}}&lng={{tests.longitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{tests.latitude}}"
												},
												{
													"key": "lng",
													"value": "{{tests.longitude}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Stores by ZipCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?q={{tests.address.postCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "q",
													"value": "{{tests.address.postCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Store detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct store detail is displayed\", function () {",
													"    pm.expect(jsonData.name).to.eql(pm.environment.get('tests.var.storeName'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores/{{tests.var.externalStoreId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores",
												"{{tests.var.externalStoreId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - No Stores random by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check stores are empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lng=1&lat={{$randomLatitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lng",
													"value": "1"
												},
												{
													"key": "lat",
													"value": "{{$randomLatitude}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Barcode Scanner",
							"item": [
								{
									"name": "[Android] - Successful barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData.listings[0].name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData.listings[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{tests.var.barcode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{tests.var.barcode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Invalid barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"No products found\", function () {",
													"    pm.expect(jsonData.listings.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{$randomBankAccount}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{$randomBankAccount}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{tests.var.guestAccessToken}}",
										"type": "string"
									}
								]
							}
						},
						{
							"name": "MMM - Match My Makeup",
							"item": [
								{
									"name": "[Android] - Get MMM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Token exists\", function () {",
													"    pm.expect(jsonData.token).to.be.a('string');",
													"});",
													"",
													"pm.test(\"clientId exists\", function () {",
													"    pm.expect(jsonData.clientId).to.be.a('string');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/mmm/token",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"mmm",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "VTO - Virtual Try On",
							"item": [
								{
									"name": "[Android] - Get VTO Product Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    jsonData.forEach(product => {",
													"        pm.expect(product.guid).to.eql(pm.environment.get(\"tests.var.vtoId\"));",
													"    })",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products/vto?ids={{tests.var.vtoId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"vto"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.vtoId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Logged User Journey",
					"item": [
						{
							"name": "Settings & Launch",
							"item": [
								{
									"name": "[Android] - Setting request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"const poq_salt = jsonData.find(config => config.key === \"fragmentSuffix\").value;",
													"pm.environment.set(\"poq-salt\", poq_salt);",
													"",
													"pm.test(\"Settings array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.android.version-code\")}`, function () {",
													"    var forceUpdateConfigValue = jsonData.find(config => config.key === \"forceUpdate_Android\").value;",
													"    pm.expect(forceUpdateConfigValue).to.eql('false');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random poq-user-id on the first running request",
													"",
													"var uuid = require('uuid');",
													"var poqUserId = uuid.v4();",
													"pm.environment.set(\"tests.android.poq-user-id\", poqUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/settings/config/{{poq-app-id}}/0",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"settings",
												"config",
												"{{poq-app-id}}",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Launch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Force update is not applied on current app version\", function () {",
													"    pm.expect(jsonData.forceUpdate).to.be.null;",
													"});",
													"",
													"pm.test(\"Validate the onboarding object\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the onboarding ID is a non-empty string\", function () {",
													"  pm.expect(jsonData).to.be.an('object');",
													"  pm.expect(jsonData.onboarding.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.all.keys('forceUpdate', 'maintenance', 'onboarding', 'customData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var isRegressionRunVar = pm.environment.get(\"tests.isRegressionRun\");",
													"var isRegressionRun = (isRegressionRunVar.toLowerCase() === \"true\"); ",
													"if (!isRegressionRun) {",
													"    postman.setNextRequest(\"[Android] - Log In User - Invalid Credentials\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/launch?appVersion={{tests.android.appVersion}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"launch"
											],
											"query": [
												{
													"key": "appVersion",
													"value": "{{tests.android.appVersion}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Accounts",
							"item": [
								{
									"name": "New User Journey",
									"item": [
										{
											"name": "Register - New User",
											"item": [
												{
													"name": "[Android] - Register new user",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"tests.var.encryptedPassword\", jsonData.encryptedPassword);",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.random.email\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'isPromotion' is false\", function () {",
																	"    pm.expect(jsonData.isPromotion).to.eq(pm.environment.get(\"tests.random.boolean\"));",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var randomFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
																	"var randomLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
																	"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
																	"var randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");",
																	"var randomPhone = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");",
																	"var randomBoolean = pm.variables.replaceIn(\"{{$randomBoolean}}\");",
																	"",
																	"",
																	"randomPassword = randomPassword + \"$\";",
																	"",
																	"// Set vars",
																	"pm.environment.set(\"tests.random.firstName\", randomFirstName);",
																	"pm.environment.set(\"tests.random.lastName\", randomLastName);",
																	"pm.environment.set(\"tests.random.email\", randomEmail);",
																	"pm.environment.set(\"tests.random.password\", randomPassword);",
																	"pm.environment.set(\"tests.random.phone\", randomPhone);",
																	"pm.environment.set(\"tests.random.boolean\", randomBoolean === 'true');",
																	"",
																	"",
																	"",
																	"const poqUserId = pm.environment.get(\"tests.android.poq-user-id\");",
																	"const secretKey = pm.environment.get(\"secretKey\");",
																	"const poq_salt = pm.environment.get('poq-salt');",
																	"",
																	"",
																	"function buildRequestBody(){",
																	"    const body = ",
																	"    {",
																	"       profile: {",
																	"\t\tphone: randomPhone,",
																	"\t\tfirstName: randomFirstName,",
																	"\t\tbirthday: \"2008-01-17\",",
																	"\t\temail: randomEmail,",
																	"\t\tisPromotion: randomBoolean === 'true',",
																	"\t\tencryptedPassword: randomPassword,",
																	"\t\tlastName: randomLastName",
																	"\t},",
																	"\tcredentials: {",
																	"\t\tusername: randomEmail,",
																	"\t\tpassword: randomPassword",
																	"\t},",
																	"\tisPromotion: randomBoolean === 'true'",
																	"    }",
																	"    return JSON.stringify(body);",
																	"    //Register doesn't require spaces while LOGIN does!!",
																	"}",
																	"",
																	"console.log(buildRequestBody())",
																	"",
																	"const theIterations = 1000;",
																	"const theOutputKeyLength = 16;",
																	"",
																	"function getSecretKey(key, salt, iterations) {",
																	"    const hasher = CryptoJS.algo.SHA256.create();",
																	"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
																	"        keySize: 256 / 32,",
																	"        iterations: iterations,",
																	"        hasher: hasher",
																	"    });",
																	"    return derivedKey;",
																	"}",
																	"",
																	"function getBytes(input) {",
																	"    return CryptoJS.enc.Utf8.parse(input);",
																	"}",
																	"",
																	"function signRequest() {",
																	"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
																	"    const saltBytes = getBytes(poq_salt);",
																	"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
																	"    const body = buildRequestBody();",
																	"    const input = body + poqUserId;",
																	"    hashInputBytes = getBytes(input);",
																	"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
																	"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
																	"",
																	"    pm.request.headers.add({",
																	"        key: 'poq-auth',",
																	"        value: signedEncoded",
																	"    });",
																	"}",
																	"",
																	"signRequest();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"user-agent": true,
															"accept-encoding": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\"profile\":{\"phone\":\"{{tests.random.phone}}\",\"firstName\":\"{{tests.random.firstName}}\",\"birthday\":\"2008-01-17\",\"email\":\"{{tests.random.email}}\",\"isPromotion\":{{tests.random.boolean}},\"encryptedPassword\":\"{{tests.random.password}}\",\"lastName\":\"{{tests.random.lastName}}\"},\"credentials\":{\"username\":\"{{tests.random.email}}\",\"password\":\"{{tests.random.password}}\"},\"isPromotion\":{{tests.random.boolean}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/account/register/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"account",
																"register",
																"{{poq-app-id}}",
																"{{tests.ios.poq-user-id}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "My account",
											"item": [
												{
													"name": "[Android] - Account Details - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Check if content is not null\", function () {",
																	"    pm.expect(jsonData.length).to.not.eq(null);",
																	"});",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.random.email\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'isPromotion' is false\", function () {",
																	"    pm.expect(jsonData.isPromotion).to.eq(pm.environment.get(\"tests.random.boolean\"));",
																	"});",
																	"",
																	"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
																	"var cookies = jsonData.cookies;",
																	"",
																	"pm.test(\"Check cookies domain matches with client one\", function () {",
																	"    cookies.forEach(cookie => ",
																	"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
																	"    )",
																	"});",
																	"",
																	"// Collect cookies ",
																	"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
																	"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/account/details/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"account",
																"details",
																"{{poq-app-id}}",
																"{{tests.ios.poq-user-id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Account Content - New User",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/ContentBlocks/{{poq-app-id}}/1",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"ContentBlocks",
																"{{poq-app-id}}",
																"1"
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Account Profile - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json();",
																	"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
																	"",
																	"pm.test(\"Check if 'email' matches\", function () {",
																	"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.random.email\").toLowerCase());",
																	"});",
																	"",
																	"pm.test(\"Check if 'firstName' matches\", function () {",
																	"    pm.expect(jsonData.firstName).to.eq(pm.environment.get(\"tests.random.firstName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if 'lastName' matches\", function () {",
																	"    pm.expect(jsonData.lastName).to.eq(pm.environment.get(\"tests.random.lastName\"));",
																	"});",
																	"",
																	"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
																	"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/v1/loyalty/userprofile",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"v1",
																"loyalty",
																"userprofile"
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Loyalty Rewards - Get Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/rewards-widgets",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"rewards-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Loyalty Rewards - Load Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"",
																	"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[Android] - Loyalty Rewards - Load Widgets - New User\");",
																	"} else {",
																	"    postman.setNextRequest(\"[Android] - Points Activities - Get Widgets - New User\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
																	"var rewardGroupingId = rewardGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
																	"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"v1",
																"loyalty",
																"rewards"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.rewardGroupingId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Points Activities - Get Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"const jsonData = pm.response.json()",
																	"",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/activities-widgets",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"activities-widgets"
															]
														}
													},
													"response": []
												},
												{
													"name": "[Android] - Points Activities - Load Widgets - New User",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
																	"    postman.setNextRequest(\"[Android] - Points Activities - Load Widgets - New User\");",
																	"} else {",
																	"    postman.setNextRequest(\"[Android] - Log In User - Invalid Credentials\");",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
																	"",
																	"var activityGroupingId = activitiesGroupingIds.shift();",
																	"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
																	"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
																	"",
																	"pm.request.headers.add({",
																	"  key: 'external-cookies-string',",
																	"  value: '{{test.var.externalCookiesRaw}}'",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{tests.url}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
															"host": [
																"{{tests.url}}"
															],
															"path": [
																"loyalty",
																"activities"
															],
															"query": [
																{
																	"key": "groupingId",
																	"value": "{{tests.var.activityGroupingId}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "basic",
												"basic": [
													{
														"key": "username",
														"value": "{{tests.random.email}}",
														"type": "string"
													},
													{
														"key": "password",
														"value": "{{tests.var.encryptedPassword}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															" pm.request.headers.add({",
															"    key: 'poq-auth',",
															"    value: \"{{tests.var.poq-auth}}\"",
															" });"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Login",
									"item": [
										{
											"name": "[Android] - Log In User - Invalid Credentials",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.android.poq-user-id\");",
															"const secretKey = pm.environment.get(\"secretKey\");",
															"const poq_salt = pm.environment.get('poq-salt');",
															"",
															"var randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
															"pm.environment.set(\"tests.random.email\", randomEmail);",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: randomEmail,",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct error message is being displayed\", function () {",
															"    pm.expect(jsonData.message).to.eql(pm.environment.get(\"tests.messages.invalidLogin\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.random.email}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Log In User - Invalid auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.android.poq-user-id\");",
															"const uuid = require(\"uuid\");",
															"const secretKey = uuid.v4();",
															"const poq_salt = uuid.v4();",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: pm.environment.get('tests.existingUserEmail'),",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n\t\"password\": \"{{tests.existingUserPassword}}\",\n\t\"username\": \"{{$randomEmail}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Log In User",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const poqUserId = pm.environment.get(\"tests.android.poq-user-id\");",
															"const secretKey = pm.environment.get(\"secretKey\");",
															"const poq_salt = pm.environment.get('poq-salt');",
															"",
															"function buildRequestBody(){",
															"    const body = {",
															"        isMasterCard: false,",
															"        username: pm.environment.get('tests.existingUserEmail'),",
															"        password: pm.environment.get('tests.existingUserPassword')",
															"    }",
															"    return JSON.stringify(body, null, 4);",
															"}",
															"",
															"const theIterations = 1000;",
															"const theOutputKeyLength = 16;",
															"",
															"function getSecretKey(key, salt, iterations) {",
															"    const hasher = CryptoJS.algo.SHA256.create();",
															"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
															"        keySize: 256 / 32,",
															"        iterations: iterations,",
															"        hasher: hasher",
															"    });",
															"    return derivedKey;",
															"}",
															"",
															"function getBytes(input) {",
															"    return CryptoJS.enc.Utf8.parse(input);",
															"}",
															"",
															"function signRequest() {",
															"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
															"    const saltBytes = getBytes(poq_salt);",
															"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
															"    const body = buildRequestBody();",
															"    const input = body + poqUserId;",
															"    hashInputBytes = getBytes(input);",
															"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
															"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
															"",
															"    pm.request.headers.add({",
															"        key: 'poq-auth',",
															"        value: signedEncoded",
															"    });",
															"",
															"    pm.environment.set(\"tests.var.poq-auth\", signedEncoded);",
															"}",
															"",
															"signRequest();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"pm.environment.set(\"tests.var.encryptedPassword\", jsonData.encryptedPassword);",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if 'isPromotion' is false\", function () {",
															"    pm.expect(jsonData.isPromotion).to.eq(false);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"user-agent": true,
													"accept-encoding": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.existingUserEmail}}\",\n    \"password\": \"{{tests.existingUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"login",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Award login activity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if awarded\", function () {",
															"    pm.expect(jsonData.awarded).to.be.true;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{tests.existingUserEmail}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{tests.var.encryptedPassword}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"activity_id\": {{tests.activities.login}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/awardactivity",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"awardactivity"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "My account",
									"item": [
										{
											"name": "[Android] - Account Details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if content is not null\", function () {",
															"    pm.expect(jsonData.length).to.not.eq(null);",
															"});",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.email).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if 'isPromotion' is false\", function () {",
															"    pm.expect(jsonData.isPromotion).to.eq(false);",
															"});",
															"",
															"var clientDomainsList = [\".elfcosmetics.com\", \"development.elfcosmetics.com\", \"www.elfcosmetics.com\"];",
															"var cookies = jsonData.cookies;",
															"",
															"pm.test(\"Check cookies domain matches with client one\", function () {",
															"    cookies.forEach(cookie => ",
															"        pm.expect(cookie.domain).to.be.oneOf(clientDomainsList)",
															"    )",
															"});",
															"",
															"// Collect cookies ",
															"var cookeisList = cookies.map(cookie => cookie.rawValue.split(\";\")[0].concat(\";\"))",
															"pm.environment.set(\"test.var.externalCookiesRaw\", cookeisList)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/account/details/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"account",
														"details",
														"{{poq-app-id}}",
														"{{tests.ios.poq-user-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Account Content",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/ContentBlocks/{{poq-app-id}}/1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"ContentBlocks",
														"{{poq-app-id}}",
														"1"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Account Profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"const loylatyTiers = [\"Pro\", \"Fan\", \"Icon\"];",
															"",
															"pm.test(\"Check if 'email' matches\", function () {",
															"    pm.expect(jsonData.emailAddress).to.eq(pm.environment.get(\"tests.existingUserEmail\"));",
															"});",
															"",
															"pm.test(\"Check if 'firstName' matches\", function () {",
															"    pm.expect(jsonData.firstName).to.eq(\"Elf\");",
															"});",
															"",
															"pm.test(\"Check if 'lastName' matches\", function () {",
															"    pm.expect(jsonData.lastName).to.eq(\"Postman Tests\");",
															"});",
															"",
															"pm.test(\"Check if current tier matches with one of expeceted\", function () {",
															"    pm.expect(jsonData.tierInfo.currentLevel.title).to.be.oneOf(loylatyTiers);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/v1/loyalty/userprofile",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"v1",
														"loyalty",
														"userprofile"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Loyalty Rewards - Get Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"tests.var.rewardGroupingIds\", jsonData);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/rewards-widgets",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"rewards-widgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Loyalty Rewards - Load Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
															"",
															"if (rewardGroupingIds && rewardGroupingIds.length > 0){",
															"    postman.setNextRequest(\"[Android] - Loyalty Rewards - Load Widgets\");",
															"} else {",
															"    postman.setNextRequest(\"[Android] - Points Activities - Get Widgets\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var rewardGroupingIds = pm.environment.get(\"tests.var.rewardGroupingIds\");",
															"var rewardGroupingId = rewardGroupingIds.shift();",
															"pm.environment.set(\"tests.var.rewardGroupingId\", rewardGroupingId);",
															"pm.environment.set(\"tests.var.rewardGroupingIds\", rewardGroupingIds);",
															"",
															"pm.request.headers.add({",
															"  key: 'external-cookies-string',",
															"  value: '{{test.var.externalCookiesRaw}}'",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/v1/loyalty/rewards?groupingId={{tests.var.rewardGroupingId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"v1",
														"loyalty",
														"rewards"
													],
													"query": [
														{
															"key": "groupingId",
															"value": "{{tests.var.rewardGroupingId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Points Activities - Get Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json()",
															"",
															"pm.environment.set(\"tests.var.activitiesGroupingIds\", jsonData)",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/activities-widgets",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"activities-widgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Points Activities - Load Widgets",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
															"",
															"if (activitiesGroupingIds && activitiesGroupingIds.length > 0){",
															"    postman.setNextRequest(\"[Android] - Points Activities - Load Widgets\");",
															"} else {",
															"    postman.setNextRequest(\"[Android] - Banners - No labels\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var activitiesGroupingIds = pm.environment.get(\"tests.var.activitiesGroupingIds\");",
															"",
															"var activityGroupingId = activitiesGroupingIds.shift();",
															"pm.environment.set(\"tests.var.activityGroupingId\", activityGroupingId);",
															"pm.environment.set(\"tests.var.activitiesGroupingIds\", activitiesGroupingIds);",
															"",
															"pm.request.headers.add({",
															"  key: 'external-cookies-string',",
															"  value: '{{test.var.externalCookiesRaw}}'",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/loyalty/activities?groupingId={{tests.var.activityGroupingId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"loyalty",
														"activities"
													],
													"query": [
														{
															"key": "groupingId",
															"value": "{{tests.var.activityGroupingId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "basic",
										"basic": [
											{
												"key": "password",
												"value": "{{tests.var.encryptedPassword}}",
												"type": "string"
											},
											{
												"key": "username",
												"value": "{{tests.existingUserEmail}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													" pm.request.headers.add({",
													"    key: 'poq-auth',",
													"    value: \"{{tests.var.poq-auth}}\"",
													" });"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Banners",
							"item": [
								{
									"name": "[Android] - Banners - No labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Online",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=online",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "online"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Cosmetics",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});",
													"",
													"//Set banners title in order to asser that same banners are not returned when label change",
													"pm.environment.set(\"tests.bannersTitles\", Object.values(bannersTitles));",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=cosmetics",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "cosmetics"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Banners - Skin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Banners array is not empty\", function () {",
													"    pm.expect(jsonData.length).to.not.eql(0);",
													"});",
													"",
													"var contentTypes = [\"image\", \"video\", \"category\", \"productCarousel\", \"imageCarousel\", \"custom\", \"ugcCarousel\"];",
													"",
													"pm.test(\"Each banner has a correct contentType\", function () {",
													"    jsonData.forEach(bannerObject => {",
													"        pm.expect(bannerObject.contentType).to.be.oneOf(contentTypes);",
													"    })",
													"});",
													"",
													"var bannersTitles = []",
													"jsonData.forEach(bannerObject => {",
													"    bannersTitles.push(bannerObject.title);",
													"})",
													"",
													"pm.test(\"Banners are different by using 'Cosmetics' label compared to 'Online'\", function () {",
													"    pm.expect(pm.environment.get(\"tests.bannersTitles\")).to.not.eql(Object.values(bannersTitles));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/banners/{{poq-app-id}}?slot-content-id=home&labels=skin",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"banners",
												"{{poq-app-id}}"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "home"
												},
												{
													"key": "labels",
													"value": "skin"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "App Stories",
							"item": [
								{
									"name": "[Android] - App Stories",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Stories array is not empty\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.stories.length).to.not.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/appstories/apps/{{poq-app-id}}/home",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"appstories",
												"apps",
												"{{poq-app-id}}",
												"home"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Catalogue",
							"item": [
								{
									"name": "Search by Keyword Sort and Filters",
									"item": [
										{
											"name": "[Android] - Predictive Search",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check categories is not empty\", function () {",
															"    pm.expect(jsonData.categories.length).to.be.above(0);",
															"});",
															"",
															"pm.test(\"Check category title property exists\", function () {",
															"   pm.expect(jsonData.categories[0]).to.have.property('title');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate predictive results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.predictiveSearchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.predictiveSearchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search/predictive?keyword={{tests.var.predictiveSearchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search",
														"predictive"
													],
													"query": [
														{
															"key": "keyword",
															"value": "{{tests.var.predictiveSearchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Search by keyword",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"//Extracting Sorting IDs",
															"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}",
															"",
															"// Store product ID which are stock available to true",
															"var productIds = [];",
															"var listingIds = [];",
															"var productNames = [];",
															"var variationIds = [];",
															"",
															"var productList = jsonData.listings;",
															"",
															"if (productList.length === 0) {",
															"    postman.setNextRequest(\"[Android] - Search by keyword\");",
															"}",
															"",
															"for (var i=0; i < productList.length; i++)",
															"{",
															"    var variantGroups = productList[i].variantGroups;",
															"    for (var j=0; j < variantGroups.length; j++)",
															"    {",
															"        if ((variantGroups[j].stock && variantGroups[j].stock.available === true)) {",
															"            productIds.push(productList[i].productId)",
															"            listingIds.push(productList[i].id)",
															"            if (productList[i].variantGroups[j].formVariationIds) {",
															"                variationIds.push(productList[i].variantGroups[j].formVariationIds[0])",
															"            } else {",
															"                var listingId = productList[i].id.split(\"-poqListingId-\");",
															"                variationIds.push(listingId[1]);",
															"            }",
															"            productNames.push(productList[i].name)",
															"        }",
															"    }",
															"}",
															"",
															"",
															"// Pick a random number within productIds array length to extact a random product at run time ",
															"var randomNumber = Math.floor(Math.random() * (productIds.length));",
															"",
															"pm.environment.set(\"tests.var.productId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.listingId\", listingIds[randomNumber]);",
															"pm.environment.set(\"tests.var.productName\", productNames[randomNumber]);",
															"pm.environment.set(\"tests.var.variantId\", productIds[randomNumber]);",
															"pm.environment.set(\"tests.var.variantGroupId\", variationIds[randomNumber]);",
															"",
															"// Fill a list of ids to be used to simulate \"Recently View\" carrousel",
															"pm.environment.set(\"tests.var.recentyViewIds\", Object.values(productIds));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Pick random search term to variate PLP results going through tests improving reliability of tests covering more cases.",
															"",
															"var searchKeywordsToSplit = pm.variables.get(\"tests.searchKeywords\");",
															"var searchKeywords = searchKeywordsToSplit.split(\",\");",
															"const random = Math.floor(Math.random() * (searchKeywords.length - 1));",
															"pm.environment.set(\"tests.var.searchKeyword\", searchKeywords[random])"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Search PLP - Dynamically sorted",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"var listingSize = jsonData.listings.length;",
															"",
															"pm.test(\"Check total PLP results are not 0\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).to.not.eql(0);",
															"});",
															"",
															"const sortOptions = jsonData.sortOptions;",
															"",
															"pm.test(\"Sort Options are not empty\", function () {",
															"    pm.expect(sortOptions.length).to.not.eql(0);",
															"});",
															"",
															"pm.test(\"Check each product has at least 1 image\", function () {",
															"    jsonData.listings.forEach(product => {",
															"        product.variantGroups.forEach(variant => {",
															"            pm.expect(variant.images.length).to.be.at.least(1);",
															"        })",
															"    });",
															"});",
															"",
															"pm.test(\"Sort Options to have expected properties\", function () {",
															"    sortOptions.forEach(sortOption => {",
															"        pm.expect(sortOption).to.have.property(\"id\");",
															"        pm.expect(sortOption).to.have.property(\"title\");",
															"        pm.expect(sortOption).to.have.property(\"default\");",
															"    });",
															"});",
															"",
															"var numberOfItems = jsonData.pagination.numberOfItems;",
															"",
															"pm.test(\"Check PLP is not empty\", function () {",
															"    pm.expect(listingSize).to.not.eql(0);",
															"});",
															"",
															"pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
															"",
															"if (listingSize > 0 ) {",
															"    pm.test(\"Assert all products have a valid price\", function () {",
															"        jsonData.listings.forEach(product => {",
															"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
															"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
															"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
															"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
															"",
															"            if (product.priceRange.was) {",
															"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
															"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
															"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
															"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
															"            } ",
															"        });",
															"",
															"        pm.test(\"Was price to equal or be greater than Now price\", function () {",
															"            jsonData.listings.forEach(product => {",
															"                if (product.priceRange.was) {",
															"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
															"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
															"                }",
															"            })",
															"            ",
															"        });",
															"        ",
															"    })",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
															"",
															"var sortingOptionId = sortingOptionsIds.shift();",
															"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
															"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&sort={{tests.var.sortOptionId}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "sort",
															"value": "{{tests.var.sortOptionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Category  PLP filter by maximum and minimum price Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Listings is not empty\", function () {",
															"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Filters are not empty\", function () {",
															"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
															"});",
															"",
															"pm.test(\"Best Sellers is set as default Sort\", function () {",
															"    var bestSellers = jsonData.sortOptions",
															"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
															"    pm.expect(bestSellers).to.not.be.undefined;",
															"});",
															"",
															"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
															"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/search?q={{tests.var.searchKeyword}}&maxPrice=100&minPrice=1",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "q",
															"value": "{{tests.var.searchKeyword}}"
														},
														{
															"key": "maxPrice",
															"value": "100"
														},
														{
															"key": "minPrice",
															"value": "1"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[Android] - Shop",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"const allCategories = [];",
													"",
													"pm.test(\"Verify that the 'categories' array is present and not empty\", function () {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData.categories).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Catgories array should not be empty\");",
													"});",
													"",
													"const getAllCategoriesObjects = array => array.flatMap(category => {",
													"    if (Array.isArray(category.categories) && category.categories.length > 0) {",
													"       return getAllCategoriesObjects(category.categories)",
													"    } else {",
													"       allCategories.push(category);",
													"   }",
													"})",
													"",
													"pm.test(\"Verify that the 'categories' have all properties correctly evaluated\", function () {",
													"    getAllCategoriesObjects(jsonData.categories);",
													"    allCategories.forEach(category => {",
													"        pm.expect(category).to.exist.and.to.be.an('object')",
													"        pm.expect(category.id).to.not.eql(null);",
													"        pm.expect(category.id).to.have.lengthOf.at.least(1, \"'id' should not be empty\");",
													"        pm.expect(category.name).to.not.eql(null);",
													"        pm.expect(category.name).to.have.lengthOf.at.least(1, \"'name' should not be empty\");",
													"    })",
													"});",
													"",
													"// Get all sub categories and randomised",
													"const getIds = arr => (",
													"    arr.flatMap(                // iterate using \".flatMap()\" to avoid nesting",
													"        ({ id, categories }) => {   // de-structure to directly access \"id\" & \"categories\"",
													"            if (                    // if \"categories\" is not empty, recurse to next level",
													"                Array.isArray(categories) &&",
													"                categories.length > 0",
													"            ) {",
													"                return getIds(categories);",
													"            } else {                // if it is empty, return the id",
													"                return id;",
													"            }",
													"        }",
													"    )",
													");",
													"",
													"var subCategories = getIds(jsonData.categories);",
													"const random = Math.floor(Math.random() * subCategories.length);",
													"",
													"pm.environment.set(\"tests.var.subCategoryId\", subCategories[random]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/shop?slot-content-id=shop",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"shop"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "shop"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PLP - Products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var listingSize = jsonData.listings.length;",
													"",
													"// Check if PLP has item greater then 3 and retry for maximum 10 times ",
													"// If it doesn't then it executes '[iOS] - Shop' request which in turn is the one selecting a random category",
													"",
													"const maxNumberOfTries = 10;",
													"if (!pm.environment.get(\"tests.var.tries\")) {  ",
													"    pm.environment.set(\"tests.var.tries\", 1);",
													"}",
													"    ",
													"if ((jsonData.pagination.numberOfItems < 3) && (pm.environment.get(\"tests.var.tries\") < maxNumberOfTries)) {",
													"        const tries = parseInt(pm.environment.get(\"tests.var.tries\"), 10);",
													"        pm.environment.set(\"tests.var.tries\", tries + 1);",
													"        postman.setNextRequest(\"[Android] - Shop\");",
													"    } else {",
													"        pm.environment.unset(\"tests.var.tries\");",
													"",
													"        pm.test(\"Assert listings is not empty\", function () {",
													"            pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"        });",
													"",
													"        pm.test(\"Assert filters is not empty\", function () {",
													"            pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"        });",
													"",
													"        var numberOfItems = jsonData.pagination.numberOfItems;",
													"",
													"        pm.test(\"Check PLP is not empty\", function () {",
													"            pm.expect(listingSize).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Check each product has at least 1 image\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                product.variantGroups.forEach(variant => {",
													"                    pm.expect(variant.images.length).to.be.at.least(1);",
													"                })",
													"            });",
													"        });",
													"",
													"        pm.environment.set(\"tests.var.productListPagination\", numberOfItems);",
													"",
													"        const sortOptions = jsonData.sortOptions;",
													"",
													"        pm.test(\"Sort Options are not empty\", function () {",
													"            pm.expect(jsonData.sortOptions.length).to.not.eql(0);",
													"        });",
													"",
													"        pm.test(\"Best Sellers is set as default Sort\", function () {",
													"            var bestSellers = jsonData.sortOptions",
													"                .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"            pm.expect(bestSellers).to.not.be.undefined;",
													"        });",
													"",
													"        pm.test(\"Sort Options to have expected properties\", function () {",
													"            sortOptions.forEach(sortOption => {",
													"                pm.expect(sortOption).to.have.property(\"id\");",
													"                pm.expect(sortOption).to.have.property(\"title\");",
													"                pm.expect(sortOption).to.have.property(\"default\");",
													"            });",
													"        });",
													"",
													"        //Extracting Sorting IDs",
													"        var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"        pm.environment.set(\"tests.var.sortOptionsIds\", sortOptionsIds);",
													"",
													"        const nextPath = jsonData.pagination.next;",
													"        if (nextPath) {",
													"            pm.environment.set(\"tests.var.plpNextPath\", nextPath);",
													"        } else {",
													"            postman.setNextRequest(\"[Android] - Category PLP - Dynamically sorted\");",
													"        }",
													"    } "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&slot-content-id=plp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "slot-content-id",
													"value": "plp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PLP - Products - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/{{tests.var.plpNextPath}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"{{tests.var.plpNextPath}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Category PLP - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"var numberOfItems = jsonData.pagination.numberOfItems;",
													"var listingSize = jsonData.listings.length;",
													"",
													"pm.test(\"Number of items matches after sorting\", function () {",
													"    pm.expect(pm.environment.get(\"tests.var.productListPagination\")).to.eql(numberOfItems);",
													"});",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Assert filters is not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(0);",
													"});",
													"",
													"pm.test(\"PLP is not empty\", function () {",
													"    pm.expect(numberOfItems).has.to.be.above(1);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check each product has at least 1 image\", function () {",
													"    jsonData.listings.forEach(product => {",
													"        product.variantGroups.forEach(variant => {",
													"            pm.expect(variant.images.length).to.be.at.least(1);",
													"        })",
													"    });",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"if (listingSize > 0 ) {",
													"    pm.test(\"Assert all products have a valid price\", function () {",
													"        jsonData.listings.forEach(product => {",
													"            pm.expect(typeof product.priceRange.now.min).to.eql('number');",
													"            pm.expect(typeof product.priceRange.now.max).to.eql('number');",
													"            pm.expect(product.priceRange.now.min).to.be.greaterThan(0);",
													"            pm.expect(product.priceRange.now.max).to.be.greaterThan(0);",
													"",
													"            if (product.priceRange.was) {",
													"                pm.expect(typeof product.priceRange.was.min).to.eql('number');",
													"                pm.expect(typeof product.priceRange.was.max).to.eql('number');",
													"                pm.expect(product.priceRange.was.min).to.be.greaterThan(0);",
													"                pm.expect(product.priceRange.was.max).to.be.greaterThan(0);",
													"            } ",
													"        });",
													"",
													"       pm.test(\"Was price to equal or be greater than Now price\", function () {",
													"            jsonData.listings.forEach(product => {",
													"                if (product.priceRange.was) {",
													"                    pm.expect(product.priceRange.was.min).to.not.be.lessThan(product.priceRange.now.min)",
													"                    pm.expect(product.priceRange.was.max).to.not.be.lessThan(product.priceRange.now.max)",
													"                }",
													"            })",
													"            ",
													"        });",
													"        ",
													"    })",
													"}",
													"",
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"if (sortingOptionsIds && sortingOptionsIds.length > 0){",
													"    postman.setNextRequest(\"[Android] - Category PLP - Dynamically sorted\");",
													"} else {",
													"    postman.setNextRequest(\"[Android] - Category PLP filter by maximum and minimum price\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.sortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.sortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.sortOptionsIds\", sortingOptionsIds);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&sort={{tests.var.sortOptionId}}&slot-content-id=plp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.sortOptionId}}"
												},
												{
													"key": "slot-content-id",
													"value": "plp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Category PLP filter by maximum and minimum price",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Listings is not empty\", function () {",
													"    pm.expect(jsonData.listings.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Filters are not empty\", function () {",
													"    pm.expect(jsonData.filters.length).has.to.be.above(1);",
													"});",
													"",
													"pm.test(\"Best Sellers is set as default Sort\", function () {",
													"    var bestSellers = jsonData.sortOptions",
													"        .find(sortOption => sortOption.id ===\"best-sellers\" && sortOption.default == true)",
													"    pm.expect(bestSellers).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"PLP pagination 'numberOfItems' is greater than 1\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).has.to.be.above(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?categories={{tests.var.subCategoryId}}&maxPrice=100&minPrice=1",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "categories",
													"value": "{{tests.var.subCategoryId}}"
												},
												{
													"key": "maxPrice",
													"value": "100"
												},
												{
													"key": "minPrice",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Details",
							"item": [
								{
									"name": "Special Product Details",
									"item": [
										{
											"name": "[Android] - PDP - Bundles",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var bundlesProductsIdsVar = pm.environment.get(\"tests.bundlesProductIds\");",
															"var bundlesProductsIds = bundlesProductsIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (bundlesProductsIds.length - 1));",
															"var bundlesProductId = bundlesProductsIds[random];",
															"pm.environment.set(\"tests.var.bundlesProductId\", bundlesProductId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.bundlesProductId'));",
															"    });",
															"",
															"    pm.test(\"'isSetProduct' flag present and set to 'true' at prouduct level\", function () {",
															"        pm.expect(jsonData[0].customData.isSetProduct).to.be.true;",
															"    });",
															"",
															"    var bundleItemsLength = jsonData[0].customData.productsInSet.length;",
															"",
															"    pm.test(\"'productsInSet' to have at least 1 item as part of the bundle\", function () {",
															"        pm.expect(bundleItemsLength).to.be.greaterThan(0);",
															"    });",
															"",
															"    var listOfProductsForMultipleAddToCart = [];",
															"    var inStockVariantsIds = []",
															"",
															"} else {",
															"    postman.setNextRequest(\"[Android] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.bundlesProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.bundlesProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - PDP - Multiple forms",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.status === \"OK\") {",
															"",
															"    pm.test(\"Status code is 200\", function () {",
															"        pm.response.to.have.status(200);",
															"    });",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(\"Product Id is correct\", function () {",
															"        pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.multipleFormsProductId'));",
															"    });",
															"",
															"    pm.test(\"'Shade' form is present\", function () {",
															"        var shade = jsonData[0].forms.find(form => form.name === \"shade\");",
															"        pm.expect(shade).to.not.eql(undefined);",
															"    });",
															"",
															"    pm.test(\"'Undertone' form is present\", function () {",
															"        var undertone = jsonData[0].forms.find(form => form.name === \"undertone\");",
															"        pm.expect(undertone).to.not.eql(undefined);",
															"    });",
															"",
															"} else {",
															"    postman.setNextRequest(\"[Android] - PDP\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var multipleFormsProductIdsVar = pm.environment.get(\"tests.multipleFormsProductIds\");",
															"var multipleFormsProductsIds = multipleFormsProductIdsVar.split(\",\");",
															"",
															"const random = Math.floor(Math.random() * (multipleFormsProductsIds.length - 1));",
															"var multipleFormsProductId = multipleFormsProductsIds[random];",
															"pm.environment.set(\"tests.var.multipleFormsProductId\", multipleFormsProductId);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.var.multipleFormsProductId}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.var.multipleFormsProductId}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Product & Variant ID extractor",
									"item": [
										{
											"name": "[Android] - Get Data from variant ID",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// Script that takes a ELF search page and extracts Product URLs and then from those extract the variant ID to resolve in POQ Backend (product is extracted randomly to have more coverage)",
															"",
															"const searchUrl = pm.environment.get(\"tests.websiteSearchUrl\");",
															"const regexForHtml = /(\\d+)\\.html/g;",
															"",
															"// Function to extract hrefs from HTML",
															"function extractHrefs(html) {",
															"    const hrefs = [];",
															"    const regex = /href=\"([^\"]*)\"/g;",
															"    let match;",
															"    while (match = regex.exec(html)) {",
															"        hrefs.push(match[1]);",
															"    }",
															"    return hrefs;",
															"}",
															"",
															"// Make a request to fetch the HTML content of the webpage",
															"function sendRequest() {",
															"    pm.sendRequest(searchUrl, (err, response) => {",
															"        if (err) {",
															"            console.error('Error fetching the HTML:', err);",
															"            return;",
															"        }",
															"        const html = response.text();",
															"        const hrefs = extractHrefs(html);",
															"        var filterProductsLinks = hrefs.filter(link => link.match(regexForHtml))",
															"        var randomNumber = Math.floor(Math.random() * (filterProductsLinks.length));",
															"        var URL = filterProductsLinks[randomNumber];",
															"",
															"        // Extract ID from URL",
															"        const regex = /\\d+/g;",
															"        const ID = URL.match(regex);",
															"",
															"        pm.environment.set(\"tests.var.idFromUrl\", ID);",
															"    });",
															"}",
															"",
															"sendRequest();"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is extracted\", function () {",
															"    pm.expect(jsonData.productId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"    pm.environment.set(\"tests.extactedProductIdFromUrl\", jsonData.productId);",
															"});",
															"",
															"pm.test(\"Variant Id is extracted\", function () {",
															"    pm.expect(jsonData.variantId).to.have.lengthOf.at.least(1, \"Product id cannot be empty\");",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products/resolve?id={{tests.var.idFromUrl}}",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products",
														"resolve"
													],
													"query": [
														{
															"key": "id",
															"value": "{{tests.var.idFromUrl}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - PDP - with extracted ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Product Id is correct\", function () {",
															"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.extactedProductIdFromUrl'));",
															"});",
															"",
															"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.null;",
															"    pm.expect(jsonData[0].customData.addToBagCta).to.not.be.undefined;",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/products?ids={{tests.extactedProductIdFromUrl}}&slot-content-id=pdp",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{tests.extactedProductIdFromUrl}}"
														},
														{
															"key": "slot-content-id",
															"value": "pdp"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "[Android] - PDP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData[0].id).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData[0].details.name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"How to use is present\", function () {",
													"    var howToUserLink = jsonData[0].meta.links.find(link => link.title === \"How to use\");",
													"    pm.expect(howToUserLink).to.not.eql(undefined);",
													"});",
													"",
													"var reviewsCount = jsonData[0].review.count;",
													"",
													"pm.test(`'Add to bag CTA' is not null (at product level) for product Id ${jsonData[0].id}`, function () {",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(null);",
													"    pm.expect(jsonData[0].customData.addToBagCta).to.not.eql(undefined);",
													"});",
													"",
													"var vtoIds = []",
													"",
													"const variantids = Object.entries(jsonData[0]['variants']).reduce((acc, [key, value]) => {",
													"    const currency = pm.environment.get(\"currency-code\");",
													"    if (value.stock.available === true && value.stock.quantity > 2 ) {",
													"        pm.environment.set(\"tests.var.barcode\", value.meta.barcode);",
													"        pm.environment.set(\"tests.var.variantId\", value.id);",
													"        pm.environment.set(\"tests.var.productName\", value.name);",
													"    } else {",
													"        postman.setNextRequest(\"[Android] - Search by keyword\");",
													"    }",
													"",
													"    if (reviewsCount > 0 ) {",
													"        pm.environment.set(\"tests.var.productIdWithReviews\", jsonData[0].id);",
													"        pm.environment.set(\"tests.var.variantIdWithReviews\", jsonData[0].meta.defaultVariantId);",
													"        pm.environment.set(\"tests.var.listingIdWithReviews\", value.listingId);",
													"        pm.environment.set(\"tests.var.numberOfReviewsFromPdp\", reviewsCount);",
													"    }",
													"   ",
													"    pm.test(`Variant images exist for variant Id ${value.id}`, function () {",
													"        pm.expect(value.images.default.length).to.not.eql(0);",
													"    });",
													"",
													"    pm.test(`'Add to bag CTA' is not null (at variant level) for variant Id ${value.id}`, function () {",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(null);",
													"        pm.expect(value.customData.addToBagCta).to.not.eql(undefined);",
													"    });",
													"",
													"    // Extract VTO id if exists",
													"    if (value.customData.vtoID) {",
													"        vtoIds.push(value.customData.vtoID);",
													"    }",
													"",
													"    pm.test(`Price is correctly formatted for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(typeof value.prices.USD.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"$\")",
													"        } else {",
													"            pm.expect(typeof value.prices.GBP.now).to.eql('number');",
													"            pm.expect(value.prices.USD.nowFormatted).includes(\"£\")",
													"        }",
													"    });",
													"    ",
													"    //Max qty differs between US and UK ",
													"    pm.test(`Max quantity is correcty set for variant Id ${value.id}`, function () {",
													"        if (currency === \"USD\") {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(9)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(9)",
													"        } else {",
													"            pm.expect(value.stock.maxOrderableQuantity).to.be.lessThan(11)",
													"            pm.expect(value.stock.quantity).to.be.lessThan(11)",
													"        }",
													"    });",
													"  return acc",
													"}, [])",
													"",
													"if (vtoIds.length > 0) {",
													"    var randomIndex = Math.floor(Math.random() * (vtoIds.length));",
													"    pm.environment.set(\"tests.var.vtoId\", vtoIds[randomIndex]);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.productId}}&slot-content-id=pdp",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.productId}}"
												},
												{
													"key": "slot-content-id",
													"value": "pdp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PDP - UGC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"UGC container is valid\", function () {",
													"    pm.expect(jsonData.items).to.be.an(\"array\")",
													"});",
													"",
													"pm.test(\"Sort Options are valid\", function () {",
													"    pm.expect(jsonData.sortOptions).to.be.an(\"array\")",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/usergeneratedcontent?productId={{tests.var.productId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"usergeneratedcontent"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Multiple PDPs ( Recently View)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products?ids={{tests.var.recentyViewIds}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.recentyViewIds}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Notify Me",
							"item": [
								{
									"name": "[Android] - PDP - Notify Me - Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": true,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - PDP - Notify Me - DO NOT Stay updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"stayUpdated\": false,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\"emailAddress\": \"{{tests.existingUserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/products/notifyMe",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"notifyMe"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Product Reviews",
							"item": [
								{
									"name": "[Android] - Product Reviews",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"const sortOptions = jsonData.sortOptions;",
													"",
													"pm.test(\"Sort Options are not empty\", function () {",
													"    pm.expect(sortOptions.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Sort Options to have expected properties\", function () {",
													"    sortOptions.forEach(sortOption => {",
													"        pm.expect(sortOption).to.have.property(\"id\");",
													"        pm.expect(sortOption).to.have.property(\"title\");",
													"        pm.expect(sortOption).to.have.property(\"default\");",
													"    });",
													"});",
													"",
													"//Extracting Sorting IDs",
													"var sortOptionsIds = sortOptions.map(sortOption => sortOption.id);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortOptionsIds);",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(parseInt(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\")));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													"",
													"if (jsonData.pagination.numberOfItems > 50) {",
													"    var first = jsonData.pagination.first;",
													"    var next = jsonData.pagination.next;",
													"    var last = jsonData.pagination.last;",
													"    var previous = jsonData.pagination.previous;",
													"    pm.environment.set(\"tests.var.reviewsNextPath\", next);",
													"} else {",
													"    postman.setNextRequest(\"[Android] - Add to bag - Pay Pal\")",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Product Reviews - Dynamically sorted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var sortingOptionsIds = pm.environment.get(\"tests.var.reviewsSortOptionsIds\");",
													"",
													"var sortingOptionId = sortingOptionsIds.shift();",
													"pm.environment.set(\"tests.var.reviewSortOptionId\", sortingOptionId);",
													"pm.environment.set(\"tests.var.reviewsSortOptionsIds\", sortingOptionsIds);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/reviews?productId={{tests.var.productIdWithReviews}}&listingId={{tests.var.listingIdWithReviews}}&sort={{tests.var.reviewSortOptionId}}&variantId={{tests.var.variantIdWithReviews}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"reviews"
											],
											"query": [
												{
													"key": "productId",
													"value": "{{tests.var.productIdWithReviews}}"
												},
												{
													"key": "listingId",
													"value": "{{tests.var.listingIdWithReviews}}"
												},
												{
													"key": "sort",
													"value": "{{tests.var.reviewSortOptionId}}"
												},
												{
													"key": "variantId",
													"value": "{{tests.var.variantIdWithReviews}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Product Reviews - With offset (Pagination)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Reviews are not empty\", function () {",
													"    pm.expect(jsonData.reviews.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check reviews have all the basic properties\", function () {",
													"    jsonData.reviews.forEach(review => {",
													"        pm.expect(review).to.have.property(\"id\");",
													"        pm.expect(review).to.have.property(\"title\");",
													"        pm.expect(review).to.have.property(\"reviewText\");",
													"        pm.expect(review).to.have.property(\"rating\");",
													"        pm.expect(review).to.have.property(\"username\");",
													"        pm.expect(review).to.have.property(\"isRecommended\");",
													"        pm.expect(review).to.have.property(\"isIncentivized\");",
													"    })",
													"});",
													"",
													"pm.test(\"Reviews number matches with PDP one\", function () {",
													"    pm.expect(jsonData.pagination.numberOfItems).to.eql(pm.environment.get(\"tests.var.numberOfReviewsFromPdp\"));",
													"});",
													"",
													"pm.test(\"Previous pagination path needs to be NOT 'null'\", function () {",
													"    pm.expect(jsonData.pagination.previous).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"Rating value has a correct value\", function () {",
													"   jsonData.reviews.forEach(review => {",
													"        pm.expect(typeof review.rating).to.eql(\"number\");",
													"        pm.expect(review.rating).to.be.above(0.9)",
													"        pm.expect(review.rating).to.be.below(5.1)",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}{{tests.var.reviewsNextPath}}",
											"host": [
												"{{tests.url}}{{tests.var.reviewsNextPath}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart",
							"item": [
								{
									"name": "Pay Pal",
									"item": [
										{
											"name": "[Android] - Add to bag - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check correct product shown in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
															"});",
															"",
															"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
															"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
															"    const rewards = jsonData.customData.availableRewards;",
															"    const rewardsV1 = jsonData.customData.availableRewardsV1;",
															"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
															"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
															"    pm.expect(birthdayReward).to.not.be.undefined;",
															"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
															"    pm.expect(birthdayReward.NumPoints).to.eql(\"0\")",
															"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
															"});",
															"",
															"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"",
															"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Order Summary - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"pm.test(\"Check that items in the summary have isInStock as true\", function () {",
															"    jsonData.itemsSummary.forEach(item => {",
															"        pm.expect(item.isInStock).to.eql(true);",
															"    });",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/express/checkout/orderSummary",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"orderSummary"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Invalid Shipping Address - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 424\", function () {",
															"    pm.response.to.have.status(424);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error message match with expected\", function () {",
															"    pm.expect(jsonData.message).to.eql(\"Invalid shipping address\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.invalidCountry}}\",\n\t\"state\": \"{{$randomStreetAddress}}\",\n\t\"city\": \"{{$randomCity}}\",\n\t\"postCode\": \"{{$randomBankAccount}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Shipping Address - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodsIds = jsonData.shippingMethods.map(method => method.id);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodsIds);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"country\": \"{{tests.address.country}}\",\n\t\"state\": \"{{tests.address.state}}\",\n\t\"city\": \"{{tests.address.city}}\",\n\t\"postCode\": \"{{tests.address.postCode}}\",\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/address",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"address"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Set Shipping method - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Check itemsSummary is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"itemsSummary\");",
															"    pm.expect(jsonData.itemsSummary.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Check shipping methods is greater than 0\", function () {",
															"    pm.expect(jsonData).to.have.property(\"shippingMethods\");",
															"    pm.expect(jsonData.shippingMethods.length).to.be.greaterThan(0);",
															"});",
															"",
															"pm.test(\"Delvery costs are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.deliveryCost).to.not.eql(null);",
															"    pm.expect(typeof jsonData.deliveryCost).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total discount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"Total Tax  are not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalTax).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalTax).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemCataloguePrice is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemCataloguePrice).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemCataloguePrice).to.eql('number');",
															"});",
															"",
															"pm.test(\"totalItemsPriceAfterCartDiscount is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.totalItemsPriceAfterCartDiscount).to.not.eql(null);",
															"    pm.expect(typeof jsonData.totalItemsPriceAfterCartDiscount).to.eql('number');",
															"});",
															"",
															"pm.test(\"orderTotal is not null and corresponds to a number\", function () {",
															"    pm.expect(jsonData.orderTotal).to.not.eql(null);",
															"    pm.expect(typeof jsonData.orderTotal).to.eql('number');",
															"});",
															"",
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"if (shippingMethodIds && shippingMethodIds.length > 0){",
															"    postman.setNextRequest(\"[Android] - Set Shipping method - Pay Pal\");",
															"} else {",
															"    postman.setNextRequest(\"[Android] - Delete Cart - Pay Pal\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var shippingMethodIds = pm.environment.get(\"tests.var.expressShippingMethodIds\");",
															"",
															"var shippingMethodId = shippingMethodIds.shift();",
															"pm.environment.set(\"tests.var.expressShippingMethodId\", shippingMethodId);",
															"pm.environment.set(\"tests.var.expressShippingMethodIds\", shippingMethodIds);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"{{tests.var.expressShippingMethodId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/express/checkout/shipping/method",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"express",
														"checkout",
														"shipping",
														"method"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Delete Cart - Pay Pal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Add to Cart - Multiple Items",
									"item": [
										{
											"name": "[Android] - Add to bag - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(() => {}, 1000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.addToCartMultipleBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/items/multiple",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														"items",
														"multiple"
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var totalCartQuantity = 0;",
															"",
															"var productsToDelete = [];",
															"",
															"const currencySymbol = pm.environment.get(\"tests.currencySymbol\");",
															"const currency = pm.environment.get(\"currency-code\");",
															"",
															"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
															"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
															"});",
															"",
															"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
															"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
															"});",
															"",
															"if (jsonData.total.now > 35) {",
															"    var formattedGiftsPromotionName = `CHOOSE 2 FREE GIFTS WITH ORDERS ${currencySymbol}35+, GET A 3rd ADDED ${currencySymbol}50+!`",
															"    const giftsPromotionObject = jsonData.customData.promotionalProducts[0].LinkedPromotion;",
															"    const bonusProducts = jsonData.customData.promotionalProducts[0].bonus_products;",
															"",
															"    pm.test(`Check Gift section is enabled for cart total ${currencySymbol}35+`, function () {",
															"        pm.expect(giftsPromotionObject).to.not.be.undefined;",
															"    });",
															"",
															"    pm.test(`Promotion name to equal with expected ${formattedGiftsPromotionName}`, function () {",
															"        pm.expect(giftsPromotionObject.name).to.eql(formattedGiftsPromotionName);",
															"    });",
															"",
															"    pm.test(`Promotion currency to equal with expected currency : ${currency}`, function () {",
															"        pm.expect(giftsPromotionObject.currency).to.eql(currency);",
															"    });",
															"",
															"    pm.test(`Bonus products exists`, function () {",
															"        pm.expect(bonusProducts).to.be.an(\"array\").and.have.length.greaterThan(0);",
															"    });",
															"",
															"    pm.test(`Bonus products to have correct properties`, function () {",
															"        bonusProducts.forEach(product => {",
															"            pm.expect(product).to.have.property(\"link\");",
															"            pm.expect(product).to.have.property(\"product_id\");",
															"            pm.expect(product).to.have.property(\"product_name\");",
															"            pm.expect(product).to.have.property(\"title\");",
															"        })",
															"    });",
															"",
															"}",
															"",
															"jsonData.cartItems.forEach(cartItem => {",
															"    totalCartQuantity += cartItem.quantity;",
															"",
															"    //collect product info to delete",
															"    productsToDelete.push(",
															"        {",
															"            \"cartItemId\": cartItem.id,",
															"            \"quantity\": 0,",
															"            \"variantId\": cartItem.variantId,",
															"            \"deleted\": true,",
															"            \"productId\": cartItem.productId",
															"        }",
															"    );",
															"});",
															"",
															"",
															"pm.test(\"Check expect numer of items is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(pm.environment.get(\"tests.var.numerOfProductsAsCollection\"));",
															"});",
															"",
															"pm.test(\"Express Checkout config is not null \", function () {",
															"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.not.be.null;",
															"});",
															"",
															"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
															"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
															"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
															"});",
															"",
															"// Build Delete all cart object",
															"var deleteBody = ",
															"{",
															"    \"items\": productsToDelete.map(product => product)",
															"}",
															"",
															"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
															"    jsonData.cartItems.forEach(itemInCart => {",
															"        pm.expect(itemInCart.isInStock).to.be.true;",
															"    });",
															"});",
															"",
															"pm.environment.set(\"tests.var.mutipleProductsToDelete\", JSON.stringify(deleteBody, null, 4));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Delete Cart - Multiple",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{tests.var.mutipleProductsToDelete}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{tests.url}}/cart/",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "[Android] - Get Cart - Empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Check no item is present in shopping bag\", function () {",
															"    pm.expect(jsonData.cartItems.length).to.eql(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{tests.url}}/cart?slot-content-id=cart",
													"host": [
														"{{tests.url}}"
													],
													"path": [
														"cart"
													],
													"query": [
														{
															"key": "slot-content-id",
															"value": "cart"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (!pm.environment.get(\"tests.var.addToCartMultipleBody\")) {",
													"    postman.setNextRequest(\"[iOS] - Add to bag\");",
													"}"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "[Android] - Add to bag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check rewards lists exists on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards).to.be.an('array');",
													"    pm.expect(jsonData.customData.availableRewardsV1).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Update Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check that items in the cart have isInStock as true\", function () {",
													"    jsonData.cartItems.forEach(itemInCart => {",
													"        pm.expect(itemInCart.isInStock).to.eql(true);",
													"    });",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 2,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": false,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add valid voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"// the cart can be always switched from home to c&c",
													"//pm.test(\"Cart is only Home Delivery \", function () {",
													"//    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"//    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"//});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"// Promotion ",
													"pm.test(\"Promotion code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.promotions.find(promotion => promotion.name.includes(\"EagleEye\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Voucher code is correctly applied\", function () {",
													"    var eagleEyePromo = jsonData.vouchers.find(voucher => voucher.code === pm.environment.get(\"tests.var.voucherId\"));",
													"    pm.expect(eagleEyePromo).to.not.eql(undefined);",
													"    const indexOfPromo = jsonData.vouchers.indexOf(eagleEyePromo);",
													"    pm.expect(jsonData.vouchers[indexOfPromo].status).to.eql(\"Applied\");",
													"    pm.environment.set(\"tests.var.appliedVoucherId\", jsonData.vouchers[indexOfPromo].id);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Cannot add same voucher twice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Reward code '${pm.environment.get(\"tests.var.voucherId\")}' is invalid.`)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Checkout Start with applied voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Remove voucher",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Express Checkout config is not null \", function () {",
													"    pm.expect(jsonData).to.have.property(\"expressCheckoutConfig\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.not.eql(null);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Cart is only Home Delivery \", function () {",
													"    pm.expect(jsonData.customData).to.have.property(\"isHomeDelivery\");",
													"    pm.expect(jsonData.customData.isHomeDelivery).to.eql(true);",
													"});",
													"",
													"",
													"//HOB-554",
													"pm.test(\"Store name is 'null' when there is no favoriteStore ID sent as customData in cart request\", function () {",
													"    pm.expect(jsonData.customData.storeName).to.eql(null);",
													"    pm.expect(jsonData.cartItems[0].customData.cartItemAvailability.storeName).to.eql(null);",
													"});",
													"",
													"if (jsonData.total.now < 10.0) {",
													"    pm.test(\"Check C&C not available under £10\", function () {",
													"        pm.expect(jsonData.customData.storePickupMessage).to.eql(\"Minimum spend £10 for Click & Collect\");",
													"    });",
													"}",
													"",
													"",
													"pm.test(\"Vouchers are NULL\", function () {",
													"    pm.expect(jsonData.vouchers).to.eql(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);",
													"pm.environment.set(\"tests.var.initialCartId\", jsonData.cartId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedVoucherId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedVoucherId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add to INVALID voucher code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"pm.test(\"Correct 'error' message is being sent\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(`Coupon code '${pm.environment.get(\"tests.random.voucher\")}' is invalid.`)",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomString = pm.variables.replaceIn(\"{{$randomUserName}}\");",
													"",
													"",
													"pm.environment.set(\"tests.random.voucher\", randomString);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.random.voucher}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Checkout Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.order.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.order.items.find(product => product.productId == pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    console.log(jsonData.url);",
													"    console.log(pm.environment.get(\"tests.checkoutUrl\"));",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Delete Cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Cart - Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart?slot-content-id=cart",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart"
											],
											"query": [
												{
													"key": "slot-content-id",
													"value": "cart"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Invalid Add to bag due to max quantity exceeded",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 424\", function () {",
													"    pm.response.to.have.status(424);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Correct message is recieved\", function () {",
													"    var errorMessage = `Item quantity cannot exceed ${pm.environment.get(\"tests.maxQty\")}`",
													"    pm.expect(jsonData.message)",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var maxQty = parseInt(pm.environment.get(\"tests.maxQty\")) + 1;",
													"pm.variables.set(\"tests.var.exceedingQty\", maxQty)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": {{tests.var.exceedingQty}},\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"customData\": {\n        \"isDownload\": false,\n        \"isSubscriptionProduct\": false,\n        \"isDigital\": false\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Stores",
							"item": [
								{
									"name": "[Android] - Get Stores by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lat={{tests.latitude}}&lng={{tests.longitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lat",
													"value": "{{tests.latitude}}"
												},
												{
													"key": "lng",
													"value": "{{tests.longitude}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Stores by ZipCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Check stores is not empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Check stores have all the basic properties\", function () {",
													"    jsonData.stores.forEach(store => {",
													"        pm.expect(store).to.have.property(\"id\");",
													"        pm.expect(store).to.have.property(\"externalStoreId\");",
													"        pm.expect(store).to.have.property(\"name\");",
													"        pm.expect(store).to.have.property(\"address\");",
													"        pm.expect(store).to.have.property(\"city\");",
													"        pm.expect(store).to.have.property(\"country\");",
													"        pm.expect(store).to.have.property(\"postCode\");",
													"    })",
													"});",
													"",
													"",
													"",
													"// Pick a random number within stores array length to extact random store data at run time ",
													"var randomNumber = Math.floor(Math.random() * (jsonData.stores.length));",
													"",
													"pm.environment.set(\"tests.var.externalStoreId\", jsonData.stores[randomNumber].externalStoreId);",
													"pm.environment.set(\"tests.var.storeName\", jsonData.stores[randomNumber].name);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?q={{tests.address.postCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "q",
													"value": "{{tests.address.postCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Store detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct store detail is displayed\", function () {",
													"    pm.expect(jsonData.name).to.eql(pm.environment.get('tests.var.storeName'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores/{{tests.var.externalStoreId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores",
												"{{tests.var.externalStoreId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - No Stores random by coordinates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check stores are empty\", function () {",
													"    pm.expect(jsonData.stores.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/stores?lng=1&lat={{$randomLatitude}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"stores"
											],
											"query": [
												{
													"key": "lng",
													"value": "1"
												},
												{
													"key": "lat",
													"value": "{{$randomLatitude}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Wishlist",
							"item": [
								{
									"name": "[Android] - Logged - Clear Wishlist Before Adding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Get Wishlist - Check Wishlist to be empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check items array is empty\", function () {",
													"    pm.expect(jsonData.items).to.be.an('array').that.is.empty",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Add to Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"setTimeout(() => {}, 5000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"listingId\": \"{{tests.var.listingId}}\",\n\t\"productId\": \"{{tests.var.productId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Get Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product Id is displayed\", function () {",
													"    pm.expect(jsonData.items[0].listingId).to.eql(pm.variables.get('tests.var.listingId'));",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Delete Single Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items/{{tests.var.listingId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items",
												"{{tests.var.listingId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Add to Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"setTimeout(() => {}, 5000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"listingId\": \"{{tests.var.listingId}}\",\n\t\"productId\": \"{{tests.var.productId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Logged - Clear Wishlist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/wishlist/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"wishlist",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Barcode Scanner",
							"item": [
								{
									"name": "[Android] - Successful barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Product Name is correct\", function () {",
													"    pm.expect(jsonData.listings[0].name).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Product Id is correct\", function () {",
													"    pm.expect(jsonData.listings[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{tests.var.barcode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{tests.var.barcode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Invalid barcode scan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"No products found\", function () {",
													"    pm.expect(jsonData.listings.length).to.eql(0);",
													"});",
													"",
													"if (pm.environment.get(\"environment\") == \"dev\" || pm.environment.get(\"environment\") == \"staging\") {",
													"    postman.setNextRequest(\"[iOS] - Get Receipts History\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/search?barcode={{$randomBankAccount}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "barcode",
													"value": "{{$randomBankAccount}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Cart - Apply/Remove Beauty Squad Reward Journey",
							"item": [
								{
									"name": "[Android] - Splash request - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const poq_salt = jsonData.config.find(config => config.key === \"fragmentSuffix\").value;",
													"pm.environment.set(\"poq-salt\", poq_salt);",
													"",
													"pm.test(\"Localization array is not empty\", function () {",
													"    pm.expect(jsonData.localization.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Theme array is not empty\", function () {",
													"    pm.expect(jsonData.theme.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(\"Config array is not empty\", function () {",
													"    pm.expect(jsonData.config.length).to.not.eql(0);",
													"});",
													"",
													"pm.test(`Verify force Update is NOT applied for version ${pm.environment.get(\"tests.ios.versionCode\")}`, function () {",
													"    var forceUpdateConfigValue = jsonData.config.find(config => config.key === \"forceUpdate\").value;",
													"    pm.expect(forceUpdateConfigValue).to.eql('false');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random poq-user-id on the first running request",
													"",
													"var uuid = require('uuid');",
													"var poqUserId = uuid.v4();",
													"pm.environment.set(\"tests.ios.poq-user-id\", poqUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/splash/ios/{{poq-app-id}}/3?poqUserId={{tests.ios.poq-user-id}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"splash",
												"ios",
												"{{poq-app-id}}",
												"3"
											],
											"query": [
												{
													"key": "poqUserId",
													"value": "{{tests.ios.poq-user-id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Log In User - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const poqUserId = pm.environment.get(\"tests.ios.poq-user-id\");",
													"const secretKey = pm.environment.get(\"secretKey\");",
													"const poq_salt = pm.environment.get('poq-salt');",
													"",
													"function buildRequestBody(){",
													"    const body = {",
													"        isMasterCard: false,",
													"        username: pm.environment.get('tests.accounts.iconTierUserEmail'),",
													"        password: pm.environment.get('tests.accounts.iconTierUserPassword')",
													"    }",
													"    return JSON.stringify(body, null, 4);",
													"}",
													"",
													"const theIterations = 1000;",
													"const theOutputKeyLength = 16;",
													"",
													"function getSecretKey(key, salt, iterations) {",
													"    const hasher = CryptoJS.algo.SHA256.create();",
													"    const derivedKey = CryptoJS.PBKDF2(key, salt, {",
													"        keySize: 256 / 32,",
													"        iterations: iterations,",
													"        hasher: hasher",
													"    });",
													"    return derivedKey;",
													"}",
													"",
													"function getBytes(input) {",
													"    return CryptoJS.enc.Utf8.parse(input);",
													"}",
													"",
													"function signRequest() {",
													"    let theSecretKeyAsArray, hashOutputBytes, hashInputBytes;",
													"    const saltBytes = getBytes(poq_salt);",
													"    theSecretKeyAsArray = getSecretKey(secretKey, saltBytes, theIterations);",
													"    const body = buildRequestBody();",
													"    const input = body + poqUserId;",
													"    hashInputBytes = getBytes(input);",
													"    hashOutputBytes = CryptoJS.HmacSHA256(hashInputBytes, theSecretKeyAsArray);",
													"    const signedEncoded = CryptoJS.enc.Base64.stringify(hashOutputBytes);",
													"",
													"    pm.request.headers.add({",
													"        key: 'poq-auth',",
													"        value: signedEncoded",
													"    });",
													"}",
													"",
													"signRequest();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"tests.var.loginAccessToken\", jsonData.accessToken);",
													"pm.environment.set(\"tests.var.loginRefreshToken\", jsonData.refreshToken);",
													"",
													"",
													"pm.test(\"Check if access token is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"accessToken\");",
													"    pm.expect(jsonData.accessToken).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check if refresh token is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"refreshToken\");",
													"    pm.expect(jsonData.refreshToken).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check if externalUserId is not null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"externalUserId\");",
													"    pm.expect(jsonData.externalUserId).to.not.eq(null);",
													"});",
													"",
													"pm.environment.set(\"tests.var.externalUserId\", jsonData.externalUserId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true,
											"accept-encoding": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isMasterCard\": false,\n    \"username\": \"{{tests.accounts.iconTierUserEmail}}\",\n    \"password\": \"{{tests.accounts.iconTierUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/account/login/{{poq-app-id}}/{{tests.ios.poq-user-id}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"account",
												"login",
												"{{poq-app-id}}",
												"{{tests.ios.poq-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add to bag - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(() => {}, 1000);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"quantity\": 1,\n\t\"variantId\": \"{{tests.var.variantId}}\",\n    \"productId\":\"{{tests.var.productId}}\",\n    \"shipmentType\": \"direct\",\n    \"deleted\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/items",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"items"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Cart - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is a 2$/£ Reward on Beauty Squad banner\", function () {",
													"    const unusedRewards = jsonData.customData.unusedRewards;",
													"    var reward = unusedRewards.find(reward => reward.RewardTitle == \"$2 off your order\");",
													"    pm.expect(reward).to.not.be.undefined;",
													"    pm.environment.set(\"tests.var.rewardCode\", reward.Code);",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Add valid voucher - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is a 2$/£ Reward applied in cart\", function () {",
													"    const appliedPromotions = jsonData.customData.appliedPromotions;",
													"    var reward = appliedPromotions.find(reward => reward.PromotionTitle == \"$2 off order\");",
													"    pm.expect(reward).to.not.be.undefined;",
													"    pm.expect(reward.status_code).to.eql(\"applied\");",
													"    pm.expect(reward.valid).to.be.true;",
													"    pm.environment.set(\"tests.var.appliedPromotionId\", reward.coupon_item_id);",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.rewardCode}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.rewardCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Checkout Start - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if cookies is not null\", function () {",
													"    pm.expect(jsonData.cookies.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check if url is set\", function () {",
													"    pm.expect(jsonData.url).to.not.eq(null);",
													"});",
													"",
													"pm.test(\"Check items are sent\", function () {",
													"    pm.expect(jsonData.items.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check correct product ID is part of items[]\", function () {",
													"    var productId = jsonData.items.find(product => product.productId === pm.environment.get(\"tests.var.productId\"));",
													"    pm.expect(productId).to.not.be.null;",
													"    pm.expect(productId).to.not.be.undefined;",
													"});",
													"",
													"pm.test(\"Check if orderNumberTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderNumberTrackingJs).to.eq(null, 'orderNumberTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if orderCostTrackingJs is set\", function () {",
													"    pm.expect(jsonData.orderCostTrackingJs).to.eq(null, 'orderCostTrackingJs is not empty');",
													"});",
													"",
													"pm.test(\"Check if item array is not null\", function () {",
													"    pm.expect(jsonData.order.items.length).to.not.eq(0);",
													"});",
													"",
													"pm.test(\"Check correct product has been added\", function () {",
													"    pm.expect(jsonData.order.items[0].productTitle).to.eql(pm.variables.get('tests.var.productName'));",
													"});",
													"",
													"pm.test(\"Check quantity matches from add to bag\", function () {",
													"    pm.expect(jsonData.order.items[0].quantity).to.eql(2);",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check currency are correct\", function () {",
													"    pm.expect(jsonData.order.currency).to.eql(pm.environment.get(\"currency-code\"));",
													"});",
													"",
													"pm.test(\"Check checkout url are correct\", function () {",
													"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"tests.checkoutUrl\"));",
													"});",
													"",
													"setTimeout(() => {}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/checkout/start",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"checkout",
												"start"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Remove voucher - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check correct product shown in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems[0].productId).to.eql(pm.variables.get('tests.var.productId'));",
													"});",
													"",
													"pm.test(\"Check only 1 item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Check there are available rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.availableRewards.length).to.be.greaterThan(0);",
													"    pm.expect(jsonData.customData.availableRewardsV1.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Check there is list for 'unused' rewards on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.unusedRewards.length).to.be.an('array');",
													"});",
													"",
													"const rewards = jsonData.customData.availableRewards;",
													"const rewardsV1 = jsonData.customData.availableRewardsV1;",
													"",
													"pm.test(\"Check user has birthday gift reward on Beauty Squad banner\", function () {",
													"    var birthdayReward = rewards.find(reward => reward.Title == \"Birthday Gift\")",
													"    var birthdayRewardV1 = rewardsV1.find(reward => reward.Title == \"Birthday Gift\")",
													"    pm.expect(birthdayReward).to.not.be.undefined;",
													"    pm.expect(birthdayRewardV1).to.not.be.undefined;",
													"    pm.expect(birthdayReward.NumPoints).to.eql(0)",
													"    pm.expect(birthdayRewardV1.NumPoints).to.eql(\"0\")",
													"});",
													"",
													"pm.test(\"Check there is NO a 2$/£ Reward applied in cart\", function () {",
													"    const appliedPromotions = jsonData.customData.appliedPromotions;",
													"    var reward = appliedPromotions.find(reward => reward.PromotionTitle == \"$2 off order\");",
													"    pm.expect(reward).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Check user has loylaty points on Beauty Squad banner\", function () {",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.a('number');",
													"    pm.expect(jsonData.customData.loyalityPoints).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"ApplePay and PayPal express checkout config are valid \", function () {",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isApplePayEnabled\");",
													"    pm.expect(jsonData.expressCheckoutConfig).to.have.property(\"isPayPalEnabled\");",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isApplePayEnabled).to.eql('boolean');",
													"    pm.expect(typeof jsonData.expressCheckoutConfig.isPayPalEnabled).to.eql('boolean');",
													"});",
													"",
													"",
													"pm.environment.set(\"tests.var.cartId\", jsonData.cartItems[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var voucherIdsVar = pm.environment.get(\"tests.voucherIds\");",
													"var voucherIds = voucherIdsVar.split(\",\");",
													"",
													"const random = Math.floor(Math.random() * (voucherIds.length - 1));",
													"var voucherId = voucherIds[random];",
													"pm.environment.set(\"tests.var.voucherId\", voucherId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"code\": \"{{tests.var.voucherId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/vouchers/{{tests.var.appliedPromotionId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												"vouchers",
												"{{tests.var.appliedPromotionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Delete Cart - Apply/Remove Beauty Squad Reward Journey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check no item is present in shopping bag\", function () {",
													"    pm.expect(jsonData.cartItems.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"items\": [{\n\t\t\"cartItemId\": \"{{tests.var.cartId}}\",\n\t\t\"quantity\": 0,\n\t\t\"variantId\": \"{{tests.var.variantId}}\",\n\t\t\"deleted\": true,\n\t\t\"productId\": \"{{tests.var.productId}}\"\n\t}]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/cart/",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"cart",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Receipt Scan",
							"item": [
								{
									"name": "[Android] - Get Receipts History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Submitted receipts list exists\", function () {",
													"    pm.expect(jsonData.submittedReceipts).to.be.an('array')",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/history",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Submit Receipt",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check message of upload confirmation\", function () {",
													"    pm.expect(jsonData.message).to.eql(\"Receipt successfully submitted for processing.\");",
													"});",
													"",
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"file_id\": \"{{tests.receiptFileId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/submit",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"submit"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Award Receipt Scan activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if awarded\", function () {",
													"    pm.expect(jsonData.awarded).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{tests.existingUserEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{tests.var.encryptedPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"activity_id\": {{tests.activities.receiptScan}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/loyalty/awardactivity",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"loyalty",
												"awardactivity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get Receipts History - With 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Submitted receipts contains 1 record\", function () {",
													"    pm.expect(jsonData.submittedReceipts.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Correct receipit image (file) has been uploaded\", function () {",
													"    jsonData.submittedReceipts.forEach(receipt => {",
													"        pm.expect(receipt.file_id).to.be.eql(pm.environment.get(\"tests.receiptFileId\"))",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/receipt/history",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"receipt",
												"history"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{tests.var.encryptedPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{tests.existingUserEmail}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.request.headers.add({",
											"  key: 'accept-version',",
											"  value: 'v2'",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "MMM - Match My Makeup",
							"item": [
								{
									"name": "[Android] - Get MMM token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Token exists\", function () {",
													"    pm.expect(jsonData.token).to.be.a('string');",
													"});",
													"",
													"pm.test(\"clientId exists\", function () {",
													"    pm.expect(jsonData.clientId).to.be.a('string');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/mmm/token",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"mmm",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "VTO - Virtual Try On",
							"item": [
								{
									"name": "[Android] - Award VTO activity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check if awarded\", function () {",
													"    pm.expect(jsonData.awarded).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{tests.existingUserEmail}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{tests.var.encryptedPassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"activity_id\": {{tests.activities.vto}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{tests.url}}/loyalty/awardactivity",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"loyalty",
												"awardactivity"
											]
										}
									},
									"response": []
								},
								{
									"name": "[Android] - Get VTO Product Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    jsonData.forEach(product => {",
													"        pm.expect(product.guid).to.eql(pm.environment.get(\"tests.var.vtoId\"));",
													"    })",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{tests.url}}/products/vto?ids={{tests.var.vtoId}}",
											"host": [
												"{{tests.url}}"
											],
											"path": [
												"products",
												"vto"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{tests.var.vtoId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Headers userd only by iOS mobile platform ",
							"",
							"pm.request.headers.add({",
							"  key: 'platform',",
							"  value: 'Android'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'poq-user-id',",
							"  value: '{{tests.android.poq-user-id}}'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'version-code',",
							"  value: '{{tests.android.version-code}}'",
							"});",
							"",
							"pm.request.headers.add({",
							"  key: 'user-agent',",
							"  value: '{{tests.android.user-agent}}'",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"  key: 'acceptLanguage',",
					"  value: 'en-GB,en;q=0.9'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'accept-encoding',",
					"  value: 'gzip, deflate, br'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'currency-code',",
					"  value: '{{currency-code}}'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'poq-app-identifier',",
					"  value: '{{poq-app-identifier}}'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'poq-app-id',",
					"  value: '{{poq-app-id}}'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'poq-currency-identifier',",
					"  value: '{{currency-code}}'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'content-type',",
					"  value: 'application/json'",
					"});",
					"",
					"pm.request.headers.add({",
					"  key: 'poq-country-identifier',",
					"  value: '{{tests.address.country}}'",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}